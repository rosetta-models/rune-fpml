package fpml.confirmation;

import com.google.common.collect.ImmutableList;
import com.rosetta.model.lib.RosettaModelObject;
import com.rosetta.model.lib.RosettaModelObjectBuilder;
import com.rosetta.model.lib.annotations.RosettaAttribute;
import com.rosetta.model.lib.annotations.RosettaDataType;
import com.rosetta.model.lib.meta.RosettaMetaData;
import com.rosetta.model.lib.path.RosettaPath;
import com.rosetta.model.lib.process.BuilderMerger;
import com.rosetta.model.lib.process.BuilderProcessor;
import com.rosetta.model.lib.process.Processor;
import com.rosetta.util.ListEquals;
import fpml.confirmation.Clearing;
import fpml.confirmation.Clearing.ClearingBuilder;
import fpml.confirmation.Clearing.ClearingBuilderImpl;
import fpml.confirmation.Clearing.ClearingImpl;
import fpml.confirmation.TradeWrapper;
import fpml.confirmation.meta.ClearingMeta;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import static java.util.Optional.ofNullable;

/**
 * A structure describing a trade registration event that is part of a clearing process.
 * @version ${project.version}
 */
@RosettaDataType(value="Clearing", builder=Clearing.ClearingBuilderImpl.class, version="${project.version}")
public interface Clearing extends RosettaModelObject {

	ClearingMeta metaData = new ClearingMeta();

	/*********************** Getter Methods  ***********************/
	/**
	 * The original trade or event submitted to the clearing service.
	 */
	TradeWrapper getSubmitted();
	/**
	 * The trades or events generated by the clearing service as a result of clearing.
	 */
	List<? extends TradeWrapper> getCleared();

	/*********************** Build Methods  ***********************/
	Clearing build();
	
	Clearing.ClearingBuilder toBuilder();
	
	static Clearing.ClearingBuilder builder() {
		return new Clearing.ClearingBuilderImpl();
	}

	/*********************** Utility Methods  ***********************/
	@Override
	default RosettaMetaData<? extends Clearing> metaData() {
		return metaData;
	}
	
	@Override
	default Class<? extends Clearing> getType() {
		return Clearing.class;
	}
	
	
	@Override
	default void process(RosettaPath path, Processor processor) {
		processRosetta(path.newSubPath("submitted"), processor, TradeWrapper.class, getSubmitted());
		processRosetta(path.newSubPath("cleared"), processor, TradeWrapper.class, getCleared());
	}
	

	/*********************** Builder Interface  ***********************/
	interface ClearingBuilder extends Clearing, RosettaModelObjectBuilder {
		TradeWrapper.TradeWrapperBuilder getOrCreateSubmitted();
		TradeWrapper.TradeWrapperBuilder getSubmitted();
		TradeWrapper.TradeWrapperBuilder getOrCreateCleared(int _index);
		List<? extends TradeWrapper.TradeWrapperBuilder> getCleared();
		Clearing.ClearingBuilder setSubmitted(TradeWrapper submitted);
		Clearing.ClearingBuilder addCleared(TradeWrapper cleared0);
		Clearing.ClearingBuilder addCleared(TradeWrapper cleared1, int _idx);
		Clearing.ClearingBuilder addCleared(List<? extends TradeWrapper> cleared2);
		Clearing.ClearingBuilder setCleared(List<? extends TradeWrapper> cleared3);

		@Override
		default void process(RosettaPath path, BuilderProcessor processor) {
			processRosetta(path.newSubPath("submitted"), processor, TradeWrapper.TradeWrapperBuilder.class, getSubmitted());
			processRosetta(path.newSubPath("cleared"), processor, TradeWrapper.TradeWrapperBuilder.class, getCleared());
		}
		

		Clearing.ClearingBuilder prune();
	}

	/*********************** Immutable Implementation of Clearing  ***********************/
	class ClearingImpl implements Clearing {
		private final TradeWrapper submitted;
		private final List<? extends TradeWrapper> cleared;
		
		protected ClearingImpl(Clearing.ClearingBuilder builder) {
			this.submitted = ofNullable(builder.getSubmitted()).map(f->f.build()).orElse(null);
			this.cleared = ofNullable(builder.getCleared()).filter(_l->!_l.isEmpty()).map(list -> list.stream().filter(Objects::nonNull).map(f->f.build()).filter(Objects::nonNull).collect(ImmutableList.toImmutableList())).orElse(null);
		}
		
		@Override
		@RosettaAttribute("submitted")
		public TradeWrapper getSubmitted() {
			return submitted;
		}
		
		@Override
		@RosettaAttribute("cleared")
		public List<? extends TradeWrapper> getCleared() {
			return cleared;
		}
		
		@Override
		public Clearing build() {
			return this;
		}
		
		@Override
		public Clearing.ClearingBuilder toBuilder() {
			Clearing.ClearingBuilder builder = builder();
			setBuilderFields(builder);
			return builder;
		}
		
		protected void setBuilderFields(Clearing.ClearingBuilder builder) {
			ofNullable(getSubmitted()).ifPresent(builder::setSubmitted);
			ofNullable(getCleared()).ifPresent(builder::setCleared);
		}

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || !(o instanceof RosettaModelObject) || !getType().equals(((RosettaModelObject)o).getType())) return false;
		
			Clearing _that = getType().cast(o);
		
			if (!Objects.equals(submitted, _that.getSubmitted())) return false;
			if (!ListEquals.listEquals(cleared, _that.getCleared())) return false;
			return true;
		}
		
		@Override
		public int hashCode() {
			int _result = 0;
			_result = 31 * _result + (submitted != null ? submitted.hashCode() : 0);
			_result = 31 * _result + (cleared != null ? cleared.hashCode() : 0);
			return _result;
		}
		
		@Override
		public String toString() {
			return "Clearing {" +
				"submitted=" + this.submitted + ", " +
				"cleared=" + this.cleared +
			'}';
		}
	}

	/*********************** Builder Implementation of Clearing  ***********************/
	class ClearingBuilderImpl implements Clearing.ClearingBuilder {
	
		protected TradeWrapper.TradeWrapperBuilder submitted;
		protected List<TradeWrapper.TradeWrapperBuilder> cleared = new ArrayList<>();
	
		public ClearingBuilderImpl() {
		}
	
		@Override
		@RosettaAttribute("submitted")
		public TradeWrapper.TradeWrapperBuilder getSubmitted() {
			return submitted;
		}
		
		@Override
		public TradeWrapper.TradeWrapperBuilder getOrCreateSubmitted() {
			TradeWrapper.TradeWrapperBuilder result;
			if (submitted!=null) {
				result = submitted;
			}
			else {
				result = submitted = TradeWrapper.builder();
			}
			
			return result;
		}
		
		@Override
		@RosettaAttribute("cleared")
		public List<? extends TradeWrapper.TradeWrapperBuilder> getCleared() {
			return cleared;
		}
		
		public TradeWrapper.TradeWrapperBuilder getOrCreateCleared(int _index) {
		
			if (cleared==null) {
				this.cleared = new ArrayList<>();
			}
			TradeWrapper.TradeWrapperBuilder result;
			return getIndex(cleared, _index, () -> {
						TradeWrapper.TradeWrapperBuilder newCleared = TradeWrapper.builder();
						return newCleared;
					});
		}
		
		@Override
		@RosettaAttribute("submitted")
		public Clearing.ClearingBuilder setSubmitted(TradeWrapper submitted) {
			this.submitted = submitted==null?null:submitted.toBuilder();
			return this;
		}
		@Override
		public Clearing.ClearingBuilder addCleared(TradeWrapper cleared) {
			if (cleared!=null) this.cleared.add(cleared.toBuilder());
			return this;
		}
		
		@Override
		public Clearing.ClearingBuilder addCleared(TradeWrapper cleared, int _idx) {
			getIndex(this.cleared, _idx, () -> cleared.toBuilder());
			return this;
		}
		@Override 
		public Clearing.ClearingBuilder addCleared(List<? extends TradeWrapper> cleareds) {
			if (cleareds != null) {
				for (TradeWrapper toAdd : cleareds) {
					this.cleared.add(toAdd.toBuilder());
				}
			}
			return this;
		}
		
		@Override 
		@RosettaAttribute("cleared")
		public Clearing.ClearingBuilder setCleared(List<? extends TradeWrapper> cleareds) {
			if (cleareds == null)  {
				this.cleared = new ArrayList<>();
			}
			else {
				this.cleared = cleareds.stream()
					.map(_a->_a.toBuilder())
					.collect(Collectors.toCollection(()->new ArrayList<>()));
			}
			return this;
		}
		
		
		@Override
		public Clearing build() {
			return new Clearing.ClearingImpl(this);
		}
		
		@Override
		public Clearing.ClearingBuilder toBuilder() {
			return this;
		}
	
		@SuppressWarnings("unchecked")
		@Override
		public Clearing.ClearingBuilder prune() {
			if (submitted!=null && !submitted.prune().hasData()) submitted = null;
			cleared = cleared.stream().filter(b->b!=null).<TradeWrapper.TradeWrapperBuilder>map(b->b.prune()).filter(b->b.hasData()).collect(Collectors.toList());
			return this;
		}
		
		@Override
		public boolean hasData() {
			if (getSubmitted()!=null && getSubmitted().hasData()) return true;
			if (getCleared()!=null && getCleared().stream().filter(Objects::nonNull).anyMatch(a->a.hasData())) return true;
			return false;
		}
	
		@SuppressWarnings("unchecked")
		@Override
		public Clearing.ClearingBuilder merge(RosettaModelObjectBuilder other, BuilderMerger merger) {
			Clearing.ClearingBuilder o = (Clearing.ClearingBuilder) other;
			
			merger.mergeRosetta(getSubmitted(), o.getSubmitted(), this::setSubmitted);
			merger.mergeRosetta(getCleared(), o.getCleared(), this::getOrCreateCleared);
			
			return this;
		}
	
		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || !(o instanceof RosettaModelObject) || !getType().equals(((RosettaModelObject)o).getType())) return false;
		
			Clearing _that = getType().cast(o);
		
			if (!Objects.equals(submitted, _that.getSubmitted())) return false;
			if (!ListEquals.listEquals(cleared, _that.getCleared())) return false;
			return true;
		}
		
		@Override
		public int hashCode() {
			int _result = 0;
			_result = 31 * _result + (submitted != null ? submitted.hashCode() : 0);
			_result = 31 * _result + (cleared != null ? cleared.hashCode() : 0);
			return _result;
		}
		
		@Override
		public String toString() {
			return "ClearingBuilder {" +
				"submitted=" + this.submitted + ", " +
				"cleared=" + this.cleared +
			'}';
		}
	}
}
