import cdm.observable.event.*
import cdm.base.staticdata.identifier.*
import cdm.legaldocumentation.contract.*
import cdm.base.staticdata.asset.credit.*
import cdm.base.math.*
import cdm.legaldocumentation.master.*
import cdm.base.staticdata.asset.common.*
import com.rosetta.model.*
import cdm.base.datetime.*
import cdm.legaldocumentation.common.*
import cdm.observable.asset.*
import cdm.product.asset.*
import cdm.base.staticdata.asset.rates.*
import cdm.legaldocumentation.csa.*
import cdm.base.staticdata.party.*
import cdm.base.datetime.daycount.*
import cdm.product.common.settlement.*
import cdm.product.collateral.*
import cdm.product.template.*
import cdm.product.common.schedule.*
import cdm.event.common.*
import cdm.fpml.confirmation.* as fpml

func MapTradeState:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tradeState TradeState (0..1)
	set tradeState:
		TradeState {
			trade: MapTrade(fpmlDataDocument),
			state: MapState(fpmlDataDocument),
			resetHistory: MapResetList(fpmlDataDocument),
			transferHistory: MapTransferStateList(fpmlDataDocument),
			observationHistory: MapObservationEventList(fpmlDataDocument),
			valuationHistory: MapValuationList(fpmlDataDocument),
		}


func MapTrade:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		trade Trade (0..1)
	set trade:
		Trade {
			tradeIdentifier: MapTradeIdentifierList(fpmlDataDocument),
			tradeDate: MapTradeDate(fpmlDataDocument),
			tradeTime: MapTimeZone(fpmlDataDocument),
			tradableProduct: MapTradableProduct(fpmlDataDocument),
			party: MapPartyList(fpmlDataDocument),
			partyRole: MapPartyRoleList(fpmlDataDocument),
			executionDetails: MapExecutionDetails(fpmlDataDocument),
			contractDetails: MapContractDetails(fpmlDataDocument),
			clearedDate: empty,
			collateral: MapCollateral(fpmlDataDocument),
			account: MapAccountList(fpmlDataDocument),
		}


func MapState:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		state State (0..1)
	set state:
		State {
			closedState: MapClosedState(fpmlDataDocument),
			positionState: empty,
		}


func MapResetList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		resetHistoryList Reset (0..*)
	add resetHistoryList:
		[
			Reset {
				resetValue: MapPrice(fpmlDataDocument),
				resetDate: empty,
				rateRecordDate: empty,
				observations: MapObservationList(fpmlDataDocument),
				averagingMethodology: MapAveragingCalculation(fpmlDataDocument),
			}
		]


func MapTransferStateList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		transferHistoryList TransferState (0..*)
	add transferHistoryList:
		[
			TransferState {
				transfer: MapTransfer(fpmlDataDocument),
				transferStatus: empty,
			}
		]


func MapObservationEventList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observationHistoryList ObservationEvent (0..*)
	add observationHistoryList:
		[
			ObservationEvent {
				creditEvent: MapCreditEvent(fpmlDataDocument),
				corporateAction: MapCorporateAction(fpmlDataDocument),
			}
		]


func MapValuationList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationHistoryList Valuation (0..*)
	add valuationHistoryList:
		[
			Valuation {
				amount: MapMoney(fpmlDataDocument),
				timestamp: empty,
				method: empty,
				source: empty,
				delta: empty,
				valuationTiming: empty,
				priceComponent: MapPrice(fpmlDataDocument),
			}
		]


func MapTradeIdentifierList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tradeIdentifierList TradeIdentifier (0..*)
	add tradeIdentifierList:
		[
			TradeIdentifier {
				identifierType: empty,
			}
		]


func MapTradeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tradeDate date (0..1)
		// [metadata id]
	set tradeDate: empty

func MapTimeZone:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tradeTime TimeZone (0..1)
		// [metadata id]
	set tradeTime:
		TimeZone {
			time: empty,
			location: MapLocation(fpmlDataDocument),
		}


func MapTradableProduct:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tradableProduct TradableProduct (0..1)
	set tradableProduct:
		TradableProduct {
			product: MapProduct(fpmlDataDocument),
			tradeLot: MapTradeLotList(fpmlDataDocument),
			counterparty: MapCounterpartyList(fpmlDataDocument),
			ancillaryParty: MapAncillaryPartyList(fpmlDataDocument),
			adjustment: empty,
		}


func MapPartyList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		partyList Party (0..*)
	add partyList:
		[
			Party {
				partyId: MapPartyIdentifierList(fpmlDataDocument),
				name: MapName(fpmlDataDocument),
				businessUnit: MapBusinessUnitList(fpmlDataDocument),
				person: MapNaturalPersonList(fpmlDataDocument),
				personRole: MapNaturalPersonRoleList(fpmlDataDocument),
				account: MapAccount(fpmlDataDocument),
				contactInformation: MapContactInformation(fpmlDataDocument),
			}
		]


func MapPartyRoleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		partyRoleList PartyRole (0..*)
	add partyRoleList:
		[
			PartyRole {
				partyReference: MapParty(fpmlDataDocument),
				role: empty,
				ownershipPartyReference: MapParty(fpmlDataDocument),
			}
		]


func MapExecutionDetails:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		executionDetails ExecutionDetails (0..1)
	set executionDetails:
		ExecutionDetails {
			executionType: empty,
			executionVenue: MapLegalEntity(fpmlDataDocument),
			packageReference: MapIdentifiedList(fpmlDataDocument),
		}


func MapContractDetails:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		contractDetails ContractDetails (0..1)
	set contractDetails:
		ContractDetails {
			documentation: MapLegalAgreementList(fpmlDataDocument),
			governingLaw: MapGoverningLaw(fpmlDataDocument),
		}


func MapCollateral:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		collateral Collateral (0..1)
	set collateral:
		Collateral {
			independentAmount: MapIndependentAmount(fpmlDataDocument),
			portfolioIdentifier: MapIdentifierList(fpmlDataDocument),
			collateralPortfolio: MapCollateralPortfolioList(fpmlDataDocument),
			collateralProvisions: MapCollateralProvisions(fpmlDataDocument),
		}


func MapAccountList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		accountList Account (0..*)
	add accountList:
		[
			Account {
				partyReference: MapParty(fpmlDataDocument),
				accountNumber: MapAccountNumber(fpmlDataDocument),
				accountName: MapAccountName(fpmlDataDocument),
				accountType: MapAccountType(fpmlDataDocument),
				accountBeneficiary: MapParty(fpmlDataDocument),
				servicingParty: MapParty(fpmlDataDocument),
			}
		]


func MapClosedState:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		closedState ClosedState (0..1)
	set closedState:
		ClosedState {
			state: empty,
			activityDate: empty,
			effectiveDate: empty,
			lastPaymentDate: empty,
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		resetValue Price (0..1)
	set resetValue:
		Price {
		}


func MapObservationList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observationsList Observation (0..*)
		// [metadata reference]
	add observationsList:
		[
			Observation {
				observedValue: MapPrice(fpmlDataDocument),
				observationIdentifier: MapObservationIdentifier(fpmlDataDocument),
			}
		]


func MapAveragingCalculation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		averagingMethodology AveragingCalculation (0..1)
	set averagingMethodology:
		AveragingCalculation {
			averagingMethod: MapAveragingCalculationMethod(fpmlDataDocument),
			precision: MapRounding(fpmlDataDocument),
		}


func MapTransfer:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		transfer Transfer (0..1)
	set transfer:
		Transfer {
			settlementOrigin: MapSettlementOrigin(fpmlDataDocument),
			resetOrigin: MapReset(fpmlDataDocument),
			transferExpression: MapTransferExpression(fpmlDataDocument),
		}


func MapCreditEvent:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		creditEvent CreditEvent (0..1)
	set creditEvent:
		CreditEvent {
			creditEventType: empty,
			eventDeterminationDate: empty,
			auctionDate: empty,
			finalPrice: MapPrice(fpmlDataDocument),
			recoveryPercent: empty,
			publiclyAvailableInformation: MapResourceList(fpmlDataDocument),
			referenceInformation: MapReferenceInformation(fpmlDataDocument),
		}


func MapCorporateAction:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		corporateAction CorporateAction (0..1)
	set corporateAction:
		CorporateAction {
			corporateActionType: empty,
			exDate: empty,
			payDate: empty,
			underlier: MapProduct(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		amount Money (0..1)
	set amount:
		Money {
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		priceComponent Price (0..1)
	set priceComponent:
		Price {
		}


func MapLocation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		location string (0..1)
		// [metadata scheme]
	set location: empty

func MapProduct:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		product Product (0..1)
	set product:
		Product {
			contractualProduct: MapContractualProduct(fpmlDataDocument),
			index: MapIndex(fpmlDataDocument),
			loan: MapLoan(fpmlDataDocument),
			assetPool: MapAssetPool(fpmlDataDocument),
			foreignExchange: MapForeignExchange(fpmlDataDocument),
			commodity: MapCommodity(fpmlDataDocument),
			security: MapSecurity(fpmlDataDocument),
			basket: MapBasket(fpmlDataDocument),
		}


func MapTradeLotList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tradeLotList TradeLot (0..*)
	add tradeLotList:
		[
			TradeLot {
				lotIdentifier: MapIdentifierList(fpmlDataDocument),
				priceQuantity: MapPriceQuantityList(fpmlDataDocument),
			}
		]


func MapCounterpartyList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		counterpartyList Counterparty (0..*)
	add counterpartyList:
		[
			Counterparty {
				role: empty,
				partyReference: MapParty(fpmlDataDocument),
			}
		]


func MapAncillaryPartyList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		ancillaryPartyList AncillaryParty (0..*)
	add ancillaryPartyList:
		[
			AncillaryParty {
				role: empty,
				partyReference: MapPartyList(fpmlDataDocument),
				onBehalfOf: empty,
			}
		]


func MapPartyIdentifierList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		partyIdList PartyIdentifier (0..*)
	add partyIdList:
		[
			PartyIdentifier {
				identifier: MapIdentifier(fpmlDataDocument),
				identifierType: empty,
			}
		]


func MapName:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		name string (0..1)
		// [metadata scheme]
	set name: empty

func MapBusinessUnitList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		businessUnitList BusinessUnit (0..*)
	add businessUnitList:
		[
			BusinessUnit {
				name: empty,
				identifier: MapIdentifier(fpmlDataDocument),
				contactInformation: MapContactInformation(fpmlDataDocument),
			}
		]


func MapNaturalPersonList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		personList NaturalPerson (0..*)
	add personList:
		[
			NaturalPerson {
				personId: MapPersonIdentifierList(fpmlDataDocument),
				honorific: empty,
				firstName: empty,
				middleName: [empty],
				initial: [empty],
				surname: empty,
				suffix: empty,
				dateOfBirth: empty,
				contactInformation: MapContactInformation(fpmlDataDocument),
				personRole: MapNaturalPersonRoleList(fpmlDataDocument),
			}
		]


func MapNaturalPersonRoleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		personRoleList NaturalPersonRole (0..*)
	add personRoleList:
		[
			NaturalPersonRole {
				personReference: MapNaturalPerson(fpmlDataDocument),
				role: MapRoleList(fpmlDataDocument),
			}
		]


func MapAccount:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		account Account (0..1)
	set account:
		Account {
			partyReference: MapParty(fpmlDataDocument),
			accountNumber: MapAccountNumber(fpmlDataDocument),
			accountName: MapAccountName(fpmlDataDocument),
			accountType: MapAccountType(fpmlDataDocument),
			accountBeneficiary: MapParty(fpmlDataDocument),
			servicingParty: MapParty(fpmlDataDocument),
		}


func MapContactInformation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		contactInformation ContactInformation (0..1)
	set contactInformation:
		ContactInformation {
			telephone: MapTelephoneNumberList(fpmlDataDocument),
			address: MapAddressList(fpmlDataDocument),
			email: [empty],
			webPage: [empty],
		}


func MapParty:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		partyReference Party (0..1)
		// [metadata reference]
	set partyReference:
		Party {
			partyId: MapPartyIdentifierList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
			businessUnit: MapBusinessUnitList(fpmlDataDocument),
			person: MapNaturalPersonList(fpmlDataDocument),
			personRole: MapNaturalPersonRoleList(fpmlDataDocument),
			account: MapAccount(fpmlDataDocument),
			contactInformation: MapContactInformation(fpmlDataDocument),
		}


func MapParty:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		ownershipPartyReference Party (0..1)
		// [metadata reference]
	set ownershipPartyReference:
		Party {
			partyId: MapPartyIdentifierList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
			businessUnit: MapBusinessUnitList(fpmlDataDocument),
			person: MapNaturalPersonList(fpmlDataDocument),
			personRole: MapNaturalPersonRoleList(fpmlDataDocument),
			account: MapAccount(fpmlDataDocument),
			contactInformation: MapContactInformation(fpmlDataDocument),
		}


func MapLegalEntity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		executionVenue LegalEntity (0..1)
	set executionVenue:
		LegalEntity {
			entityId: MapEntityIdList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
		}


func MapIdentifiedList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		packageReference IdentifiedList (0..1)
	set packageReference:
		IdentifiedList {
			listId: MapIdentifier(fpmlDataDocument),
			componentId: MapIdentifierList(fpmlDataDocument),
			price: MapPrice(fpmlDataDocument),
		}


func MapLegalAgreementList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		documentationList LegalAgreement (0..*)
	add documentationList:
		[
			LegalAgreement {
				agreementTerms: MapAgreementTerms(fpmlDataDocument),
				relatedAgreements: MapLegalAgreementList(fpmlDataDocument),
				umbrellaAgreement: MapUmbrellaAgreement(fpmlDataDocument),
			}
		]


func MapGoverningLaw:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		governingLaw GoverningLawEnum (0..1)
		// [metadata scheme]
	set governingLaw: empty

func MapIndependentAmount:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		independentAmount IndependentAmount (0..1)
	set independentAmount:
		IndependentAmount {
			paymentDetail: MapPaymentDetailList(fpmlDataDocument),
		}


func MapIdentifierList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		portfolioIdentifierList Identifier (0..*)
	add portfolioIdentifierList:
		[
			Identifier {
				issuerReference: MapParty(fpmlDataDocument),
				issuer: MapIssuer(fpmlDataDocument),
				assignedIdentifier: MapAssignedIdentifierList(fpmlDataDocument),
			}
		]


func MapCollateralPortfolioList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		collateralPortfolioList CollateralPortfolio (0..*)
		// [metadata reference]
	add collateralPortfolioList:
		[
			CollateralPortfolio {
				portfolioIdentifier: MapIdentifier(fpmlDataDocument),
				collateralPosition: MapCollateralPositionList(fpmlDataDocument),
				collateralBalance: MapCollateralBalanceList(fpmlDataDocument),
				legalAgreement: MapLegalAgreement(fpmlDataDocument),
			}
		]


func MapCollateralProvisions:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		collateralProvisions CollateralProvisions (0..1)
	set collateralProvisions:
		CollateralProvisions {
			collateralType: empty,
			eligibleCollateral: MapEligibleCollateralCriteriaList(fpmlDataDocument),
			substitutionProvisions: MapSubstitutionProvisions(fpmlDataDocument),
		}


func MapAccountNumber:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		accountNumber string (0..1)
		// [metadata scheme]
	set accountNumber: empty

func MapAccountName:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		accountName string (0..1)
		// [metadata scheme]
	set accountName: empty

func MapAccountType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		accountType AccountTypeEnum (0..1)
		// [metadata scheme]
	set accountType: empty

func MapParty:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		accountBeneficiary Party (0..1)
		// [metadata reference]
	set accountBeneficiary:
		Party {
			partyId: MapPartyIdentifierList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
			businessUnit: MapBusinessUnitList(fpmlDataDocument),
			person: MapNaturalPersonList(fpmlDataDocument),
			personRole: MapNaturalPersonRoleList(fpmlDataDocument),
			account: MapAccount(fpmlDataDocument),
			contactInformation: MapContactInformation(fpmlDataDocument),
		}


func MapParty:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		servicingParty Party (0..1)
		// [metadata reference]
	set servicingParty:
		Party {
			partyId: MapPartyIdentifierList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
			businessUnit: MapBusinessUnitList(fpmlDataDocument),
			person: MapNaturalPersonList(fpmlDataDocument),
			personRole: MapNaturalPersonRoleList(fpmlDataDocument),
			account: MapAccount(fpmlDataDocument),
			contactInformation: MapContactInformation(fpmlDataDocument),
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observedValue Price (0..1)
	set observedValue:
		Price {
		}


func MapObservationIdentifier:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observationIdentifier ObservationIdentifier (0..1)
	set observationIdentifier:
		ObservationIdentifier {
			observable: MapObservable(fpmlDataDocument),
			observationDate: empty,
			observationTime: MapTimeZone(fpmlDataDocument),
			informationSource: MapInformationSource(fpmlDataDocument),
			determinationMethodology: MapDeterminationMethodology(fpmlDataDocument),
		}


func MapAveragingCalculationMethod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		averagingMethod AveragingCalculationMethod (0..1)
	set averagingMethod:
		AveragingCalculationMethod {
			isWeighted: empty,
			calculationMethod: empty,
		}


func MapRounding:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		precision Rounding (0..1)
	set precision:
		Rounding {
			roundingDirection: empty,
			precision: empty,
		}


func MapSettlementOrigin:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		settlementOrigin SettlementOrigin (0..1)
	set settlementOrigin:
		SettlementOrigin {
			commodityPayout: MapCommodityPayout(fpmlDataDocument),
			creditDefaultPayout: MapCreditDefaultPayout(fpmlDataDocument),
			forwardPayout: MapForwardPayout(fpmlDataDocument),
			interestRatePayout: MapInterestRatePayout(fpmlDataDocument),
			optionPayout: MapOptionPayout(fpmlDataDocument),
			assetPayout: MapAssetPayout(fpmlDataDocument),
			settlementTerms: MapSettlementTerms(fpmlDataDocument),
			performancePayout: MapPerformancePayout(fpmlDataDocument),
			fixedPricePayout: MapFixedPricePayout(fpmlDataDocument),
		}


func MapReset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		resetOrigin Reset (0..1)
	set resetOrigin:
		Reset {
			resetValue: MapPrice(fpmlDataDocument),
			resetDate: empty,
			rateRecordDate: empty,
			observations: MapObservationList(fpmlDataDocument),
			averagingMethodology: MapAveragingCalculation(fpmlDataDocument),
		}


func MapTransferExpression:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		transferExpression TransferExpression (0..1)
	set transferExpression:
		TransferExpression {
			priceTransfer: empty,
			scheduledTransfer: MapScheduledTransfer(fpmlDataDocument),
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		finalPrice Price (0..1)
	set finalPrice:
		Price {
		}


func MapResourceList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		publiclyAvailableInformationList Resource (0..*)
	add publiclyAvailableInformationList:
		[
			Resource {
				resourceId: MapResourceId(fpmlDataDocument),
				resourceType: MapResourceType(fpmlDataDocument),
				language: MapLanguage(fpmlDataDocument),
				sizeInBytes: empty,
				length: MapResourceLength(fpmlDataDocument),
				mimeType: MapMimeType(fpmlDataDocument),
				name: empty,
				comments: empty,
				string: empty,
				url: empty,
			}
		]


func MapReferenceInformation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceInformation ReferenceInformation (0..1)
	set referenceInformation:
		ReferenceInformation {
			referenceEntity: MapLegalEntity(fpmlDataDocument),
			referenceObligation: MapReferenceObligationList(fpmlDataDocument),
			noReferenceObligation: empty,
			unknownReferenceObligation: empty,
			allGuarantees: empty,
			referencePrice: MapPrice(fpmlDataDocument),
			referencePolicy: empty,
			securedList: empty,
		}


func MapProduct:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		underlier Product (0..1)
	set underlier:
		Product {
			contractualProduct: MapContractualProduct(fpmlDataDocument),
			index: MapIndex(fpmlDataDocument),
			loan: MapLoan(fpmlDataDocument),
			assetPool: MapAssetPool(fpmlDataDocument),
			foreignExchange: MapForeignExchange(fpmlDataDocument),
			commodity: MapCommodity(fpmlDataDocument),
			security: MapSecurity(fpmlDataDocument),
			basket: MapBasket(fpmlDataDocument),
		}


func MapContractualProduct:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		contractualProduct ContractualProduct (0..1)
	set contractualProduct:
		ContractualProduct {
			economicTerms: MapEconomicTerms(fpmlDataDocument),
		}


func MapIndex:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		index Index (0..1)
	set index:
		Index {
		}


func MapLoan:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		loan Loan (0..1)
	set loan:
		Loan {
			borrower: MapLegalEntityList(fpmlDataDocument),
			lien: MapLien(fpmlDataDocument),
			facilityType: MapFacilityType(fpmlDataDocument),
			creditAgreementDate: empty,
			tranche: MapTranche(fpmlDataDocument),
		}


func MapAssetPool:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		assetPool AssetPool (0..1)
	set assetPool:
		AssetPool {
			version: empty,
			effectiveDate: empty,
			initialFactor: empty,
			currentFactor: empty,
		}


func MapForeignExchange:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		foreignExchange ForeignExchange (0..1)
	set foreignExchange:
		ForeignExchange {
			exchangedCurrency1: MapCashflow(fpmlDataDocument),
			exchangedCurrency2: MapCashflow(fpmlDataDocument),
			tenorPeriod: MapPeriod(fpmlDataDocument),
			exchangeRate: MapExchangeRate(fpmlDataDocument),
		}


func MapCommodity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		commodity Commodity (0..1)
		// [metadata address]
	set commodity:
		Commodity {
			commodityProductDefinition: MapCommodityProductDefinition(fpmlDataDocument),
			priceQuoteType: empty,
			deliveryDateReference: MapDeliveryDateParameters(fpmlDataDocument),
			description: empty,
		}


func MapSecurity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		security Security (0..1)
	set security:
		Security {
			securityType: empty,
			debtType: MapDebtType(fpmlDataDocument),
			equityType: empty,
			fundType: empty,
			economicTerms: MapEconomicTerms(fpmlDataDocument),
		}


func MapBasket:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		basket Basket (0..1)
	set basket:
		Basket {
			basketConstituent: MapProductList(fpmlDataDocument),
			portfolioBasketConstituent: MapBasketConstituentList(fpmlDataDocument),
		}


func MapIdentifierList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		lotIdentifierList Identifier (0..*)
	add lotIdentifierList:
		[
			Identifier {
				issuerReference: MapParty(fpmlDataDocument),
				issuer: MapIssuer(fpmlDataDocument),
				assignedIdentifier: MapAssignedIdentifierList(fpmlDataDocument),
			}
		]


func MapPriceQuantityList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		priceQuantityList PriceQuantity (0..*)
	add priceQuantityList:
		[
			PriceQuantity {
				price: MapPriceScheduleList(fpmlDataDocument),
				quantity: MapNonNegativeQuantityScheduleList(fpmlDataDocument),
				observable: MapObservable(fpmlDataDocument),
				buyerSeller: MapBuyerSeller(fpmlDataDocument),
				settlementTerms: MapSettlementTerms(fpmlDataDocument),
				effectiveDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			}
		]


func MapPartyList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		partyReferenceList Party (0..*)
		// [metadata reference]
	add partyReferenceList:
		[
			Party {
				partyId: MapPartyIdentifierList(fpmlDataDocument),
				name: MapName(fpmlDataDocument),
				businessUnit: MapBusinessUnitList(fpmlDataDocument),
				person: MapNaturalPersonList(fpmlDataDocument),
				personRole: MapNaturalPersonRoleList(fpmlDataDocument),
				account: MapAccount(fpmlDataDocument),
				contactInformation: MapContactInformation(fpmlDataDocument),
			}
		]


func MapIdentifier:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		identifier string (0..1)
		// [metadata scheme]
	set identifier: empty

func MapIdentifier:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		identifier Identifier (0..1)
	set identifier:
		Identifier {
			issuerReference: MapParty(fpmlDataDocument),
			issuer: MapIssuer(fpmlDataDocument),
			assignedIdentifier: MapAssignedIdentifierList(fpmlDataDocument),
		}


func MapPersonIdentifierList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		personIdList PersonIdentifier (0..*)
		// [metadata scheme]
	add personIdList:
		[
			PersonIdentifier {
				identifier: MapIdentifier(fpmlDataDocument),
				identifierType: empty,
				country: MapCountry(fpmlDataDocument),
			}
		]


func MapNaturalPerson:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		personReference NaturalPerson (0..1)
		// [metadata reference]
	set personReference:
		NaturalPerson {
			personId: MapPersonIdentifierList(fpmlDataDocument),
			honorific: empty,
			firstName: empty,
			middleName: [empty],
			initial: [empty],
			surname: empty,
			suffix: empty,
			dateOfBirth: empty,
			contactInformation: MapContactInformation(fpmlDataDocument),
			personRole: MapNaturalPersonRoleList(fpmlDataDocument),
		}


func MapRoleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		roleList NaturalPersonRoleEnum (0..*)
		// [metadata scheme]
	add roleList:
		[ empty		]


func MapTelephoneNumberList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		telephoneList TelephoneNumber (0..*)
	add telephoneList:
		[
			TelephoneNumber {
				telephoneNumberType: empty,
				number: empty,
			}
		]


func MapAddressList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		addressList Address (0..*)
	add addressList:
		[
			Address {
				street: [empty],
				city: empty,
				state: empty,
				country: MapCountry(fpmlDataDocument),
				postalCode: empty,
			}
		]


func MapEntityIdList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		entityIdList string (0..*)
		// [metadata scheme]
	add entityIdList:
		[ empty		]


func MapIdentifier:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		listId Identifier (0..1)
	set listId:
		Identifier {
			issuerReference: MapParty(fpmlDataDocument),
			issuer: MapIssuer(fpmlDataDocument),
			assignedIdentifier: MapAssignedIdentifierList(fpmlDataDocument),
		}


func MapIdentifierList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		componentIdList Identifier (0..*)
	add componentIdList:
		[
			Identifier {
				issuerReference: MapParty(fpmlDataDocument),
				issuer: MapIssuer(fpmlDataDocument),
				assignedIdentifier: MapAssignedIdentifierList(fpmlDataDocument),
			}
		]


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		price Price (0..1)
	set price:
		Price {
		}


func MapAgreementTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		agreementTerms AgreementTerms (0..1)
	set agreementTerms:
		AgreementTerms {
			agreement: MapAgreement(fpmlDataDocument),
			clauseLibrary: empty,
			counterparty: MapCounterpartyList(fpmlDataDocument),
		}


func MapLegalAgreementList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		relatedAgreementsList LegalAgreement (0..*)
	add relatedAgreementsList:
		[
			LegalAgreement {
				agreementTerms: MapAgreementTerms(fpmlDataDocument),
				relatedAgreements: MapLegalAgreementList(fpmlDataDocument),
				umbrellaAgreement: MapUmbrellaAgreement(fpmlDataDocument),
			}
		]


func MapUmbrellaAgreement:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		umbrellaAgreement UmbrellaAgreement (0..1)
	set umbrellaAgreement:
		UmbrellaAgreement {
			isApplicable: empty,
			language: empty,
			parties: MapUmbrellaAgreementEntityList(fpmlDataDocument),
		}


func MapPaymentDetailList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDetailList PaymentDetail (0..*)
	add paymentDetailList:
		[
			PaymentDetail {
				paymentDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
				paymentRule: MapPaymentRule(fpmlDataDocument),
				paymentAmount: MapMoney(fpmlDataDocument),
			}
		]


func MapParty:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		issuerReference Party (0..1)
		// [metadata reference]
	set issuerReference:
		Party {
			partyId: MapPartyIdentifierList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
			businessUnit: MapBusinessUnitList(fpmlDataDocument),
			person: MapNaturalPersonList(fpmlDataDocument),
			personRole: MapNaturalPersonRoleList(fpmlDataDocument),
			account: MapAccount(fpmlDataDocument),
			contactInformation: MapContactInformation(fpmlDataDocument),
		}


func MapIssuer:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		issuer string (0..1)
		// [metadata scheme]
	set issuer: empty

func MapAssignedIdentifierList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		assignedIdentifierList AssignedIdentifier (0..*)
	add assignedIdentifierList:
		[
			AssignedIdentifier {
				identifier: MapIdentifier(fpmlDataDocument),
				version: empty,
			}
		]


func MapIdentifier:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		portfolioIdentifier Identifier (0..1)
	set portfolioIdentifier:
		Identifier {
			issuerReference: MapParty(fpmlDataDocument),
			issuer: MapIssuer(fpmlDataDocument),
			assignedIdentifier: MapAssignedIdentifierList(fpmlDataDocument),
		}


func MapCollateralPositionList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		collateralPositionList CollateralPosition (0..*)
	add collateralPositionList:
		[
			CollateralPosition {
				treatment: MapCollateralTreatment(fpmlDataDocument),
				collateralPositionStatus: empty,
			}
		]


func MapCollateralBalanceList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		collateralBalanceList CollateralBalance (0..*)
	add collateralBalanceList:
		[
			CollateralBalance {
				collateralBalanceStatus: empty,
				haircutIndicator: empty,
				amountBaseCurrency: MapMoney(fpmlDataDocument),
				payerReceiver: MapPartyReferencePayerReceiver(fpmlDataDocument),
			}
		]


func MapLegalAgreement:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		legalAgreement LegalAgreement (0..1)
		// [metadata reference]
	set legalAgreement:
		LegalAgreement {
			agreementTerms: MapAgreementTerms(fpmlDataDocument),
			relatedAgreements: MapLegalAgreementList(fpmlDataDocument),
			umbrellaAgreement: MapUmbrellaAgreement(fpmlDataDocument),
		}


func MapEligibleCollateralCriteriaList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		eligibleCollateralList EligibleCollateralCriteria (0..*)
	add eligibleCollateralList:
		[
			EligibleCollateralCriteria {
				treatment: MapCollateralTreatment(fpmlDataDocument),
			}
		]


func MapSubstitutionProvisions:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		substitutionProvisions SubstitutionProvisions (0..1)
	set substitutionProvisions:
		SubstitutionProvisions {
			numberOfSubstitutionsAllowed: empty,
			noticeDeadlinePeriod: MapPeriod(fpmlDataDocument),
			noticeDeadlineDateTime: empty,
		}


func MapObservable:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observable Observable (0..1)
	set observable:
		Observable {
			rateOption: MapFloatingRateOption(fpmlDataDocument),
			commodity: MapCommodity(fpmlDataDocument),
			productIdentifier: MapProductIdentifierList(fpmlDataDocument),
			currencyPair: MapQuotedCurrencyPair(fpmlDataDocument),
			optionReferenceType: empty,
		}


func MapTimeZone:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observationTime TimeZone (0..1)
	set observationTime:
		TimeZone {
			time: empty,
			location: MapLocation(fpmlDataDocument),
		}


func MapInformationSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		informationSource InformationSource (0..1)
	set informationSource:
		InformationSource {
			sourceProvider: MapSourceProvider(fpmlDataDocument),
			sourcePage: MapSourcePage(fpmlDataDocument),
			sourcePageHeading: empty,
		}


func MapDeterminationMethodology:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		determinationMethodology DeterminationMethodology (0..1)
	set determinationMethodology:
		DeterminationMethodology {
			determinationMethod: empty,
			averagingMethod: empty,
		}


func MapCommodityPayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		commodityPayout CommodityPayout (0..1)
		// [metadata reference]
	set commodityPayout:
		CommodityPayout {
			averagingFeature: MapAveragingCalculation(fpmlDataDocument),
			commodityPriceReturnTerms: MapCommodityPriceReturnTerms(fpmlDataDocument),
			pricingDates: MapPricingDates(fpmlDataDocument),
			schedule: MapCalculationSchedule(fpmlDataDocument),
			calculationPeriodDates: MapCalculationPeriodDates(fpmlDataDocument),
			paymentDates: MapPaymentDates(fpmlDataDocument),
			underlier: MapProduct(fpmlDataDocument),
			fxFeature: MapFxFeature(fpmlDataDocument),
			delivery: MapAssetDeliveryInformation(fpmlDataDocument),
		}


func MapCreditDefaultPayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		creditDefaultPayout CreditDefaultPayout (0..1)
		// [metadata reference]
	set creditDefaultPayout:
		CreditDefaultPayout {
			generalTerms: MapGeneralTerms(fpmlDataDocument),
			protectionTerms: MapProtectionTermsList(fpmlDataDocument),
			transactedPrice: MapTransactedPrice(fpmlDataDocument),
		}


func MapForwardPayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		forwardPayout ForwardPayout (0..1)
		// [metadata reference]
	set forwardPayout:
		ForwardPayout {
			underlier: MapProduct(fpmlDataDocument),
			deliveryTerm: empty,
			delivery: MapAssetDeliveryInformation(fpmlDataDocument),
			schedule: MapCalculationSchedule(fpmlDataDocument),
		}


func MapInterestRatePayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		interestRatePayout InterestRatePayout (0..1)
		// [metadata reference]
	set interestRatePayout:
		InterestRatePayout {
			rateSpecification: MapRateSpecification(fpmlDataDocument),
			dayCountFraction: MapDayCountFraction(fpmlDataDocument),
			calculationPeriodDates: MapCalculationPeriodDates(fpmlDataDocument),
			paymentDates: MapPaymentDates(fpmlDataDocument),
			paymentDate: MapAdjustableDate(fpmlDataDocument),
			paymentDelay: empty,
			resetDates: MapResetDates(fpmlDataDocument),
			discountingMethod: MapDiscountingMethod(fpmlDataDocument),
			compoundingMethod: empty,
			cashflowRepresentation: MapCashflowRepresentation(fpmlDataDocument),
			stubPeriod: MapStubPeriod(fpmlDataDocument),
			bondReference: MapBondReference(fpmlDataDocument),
			fixedAmount: empty,
			floatingAmount: empty,
			spreadCalculationMethod: empty,
		}


func MapOptionPayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		optionPayout OptionPayout (0..1)
		// [metadata reference]
	set optionPayout:
		OptionPayout {
			buyerSeller: MapBuyerSeller(fpmlDataDocument),
			optionType: empty,
			feature: MapOptionFeature(fpmlDataDocument),
			exerciseTerms: MapOptionExercise(fpmlDataDocument),
			underlier: MapProduct(fpmlDataDocument),
			observationTerms: MapObservationTerms(fpmlDataDocument),
			schedule: MapCalculationSchedule(fpmlDataDocument),
			delivery: MapAssetDeliveryInformation(fpmlDataDocument),
		}


func MapAssetPayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		assetPayout AssetPayout (0..1)
		// [metadata reference]
	set assetPayout:
		AssetPayout {
			assetLeg: MapAssetLegList(fpmlDataDocument),
			securityInformation: MapProduct(fpmlDataDocument),
			durationType: MapDuration(fpmlDataDocument),
			minimumFee: MapMoney(fpmlDataDocument),
			dividendTerms: MapDividendTerms(fpmlDataDocument),
		}


func MapSettlementTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		settlementTerms SettlementTerms (0..1)
		// [metadata reference]
	set settlementTerms:
		SettlementTerms {
			cashSettlementTerms: MapCashSettlementTermsList(fpmlDataDocument),
			physicalSettlementTerms: MapPhysicalSettlementTerms(fpmlDataDocument),
		}


func MapPerformancePayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		performancePayout PerformancePayout (0..1)
		// [metadata reference]
	set performancePayout:
		PerformancePayout {
			observationTerms: MapObservationTerms(fpmlDataDocument),
			valuationDates: MapValuationDates(fpmlDataDocument),
			paymentDates: MapPaymentDates(fpmlDataDocument),
			underlier: MapProduct(fpmlDataDocument),
			fxFeature: MapFxFeatureList(fpmlDataDocument),
			returnTerms: MapReturnTerms(fpmlDataDocument),
			portfolioReturnTerms: MapPortfolioReturnTermsList(fpmlDataDocument),
			initialValuationPrice: MapPriceScheduleList(fpmlDataDocument),
			interimValuationPrice: MapPriceScheduleList(fpmlDataDocument),
			finalValuationPrice: MapPriceScheduleList(fpmlDataDocument),
		}


func MapFixedPricePayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fixedPricePayout FixedPricePayout (0..1)
		// [metadata reference]
	set fixedPricePayout:
		FixedPricePayout {
			paymentDates: MapPaymentDates(fpmlDataDocument),
			fixedPrice: MapFixedPrice(fpmlDataDocument),
			schedule: MapCalculationSchedule(fpmlDataDocument),
		}


func MapScheduledTransfer:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		scheduledTransfer ScheduledTransfer (0..1)
	set scheduledTransfer:
		ScheduledTransfer {
			transferType: empty,
			corporateActionTransferType: empty,
		}


func MapResourceId:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		resourceId string (0..1)
		// [metadata scheme]
	set resourceId: empty

func MapResourceType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		resourceType ResourceTypeEnum (0..1)
		// [metadata scheme]
	set resourceType: empty

func MapLanguage:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		language string (0..1)
		// [metadata scheme]
	set language: empty

func MapResourceLength:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		length ResourceLength (0..1)
	set length:
		ResourceLength {
			lengthUnit: empty,
			lengthValue: empty,
		}


func MapMimeType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		mimeType string (0..1)
		// [metadata scheme]
	set mimeType: empty

func MapLegalEntity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceEntity LegalEntity (0..1)
	set referenceEntity:
		LegalEntity {
			entityId: MapEntityIdList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
		}


func MapReferenceObligationList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceObligationList ReferenceObligation (0..*)
	add referenceObligationList:
		[
			ReferenceObligation {
				security: MapSecurity(fpmlDataDocument),
				loan: MapLoan(fpmlDataDocument),
				primaryObligor: MapLegalEntity(fpmlDataDocument),
				primaryObligorReference: MapLegalEntity(fpmlDataDocument),
				guarantor: MapLegalEntity(fpmlDataDocument),
				guarantorReference: empty,
				standardReferenceObligation: empty,
			}
		]


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referencePrice Price (0..1)
	set referencePrice:
		Price {
		}


func MapEconomicTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		economicTerms EconomicTerms (0..1)
	set economicTerms:
		EconomicTerms {
			effectiveDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			terminationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			payout: MapPayout(fpmlDataDocument),
			terminationProvision: MapTerminationProvision(fpmlDataDocument),
			calculationAgent: MapCalculationAgent(fpmlDataDocument),
			nonStandardisedTerms: empty,
			collateral: MapCollateral(fpmlDataDocument),
		}


func MapLegalEntityList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		borrowerList LegalEntity (0..*)
	add borrowerList:
		[
			LegalEntity {
				entityId: MapEntityIdList(fpmlDataDocument),
				name: MapName(fpmlDataDocument),
			}
		]


func MapLien:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		lien string (0..1)
		// [metadata scheme]
	set lien: empty

func MapFacilityType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		facilityType string (0..1)
		// [metadata scheme]
	set facilityType: empty

func MapTranche:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tranche string (0..1)
		// [metadata scheme]
	set tranche: empty

func MapCashflow:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exchangedCurrency1 Cashflow (0..1)
	set exchangedCurrency1:
		Cashflow {
			cashflowType: MapCashflowType(fpmlDataDocument),
			paymentDiscounting: MapPaymentDiscounting(fpmlDataDocument),
		}


func MapCashflow:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exchangedCurrency2 Cashflow (0..1)
	set exchangedCurrency2:
		Cashflow {
			cashflowType: MapCashflowType(fpmlDataDocument),
			paymentDiscounting: MapPaymentDiscounting(fpmlDataDocument),
		}


func MapPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tenorPeriod Period (0..1)
	set tenorPeriod:
		Period {
			periodMultiplier: empty,
			period: empty,
		}


func MapExchangeRate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exchangeRate ExchangeRate (0..1)
	set exchangeRate:
		ExchangeRate {
			crossRate: MapCrossRateList(fpmlDataDocument),
		}


func MapCommodityProductDefinition:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		commodityProductDefinition CommodityProductDefinition (0..1)
	set commodityProductDefinition:
		CommodityProductDefinition {
			referenceFramework: MapCommodityReferenceFramework(fpmlDataDocument),
			priceSource: MapPriceSource(fpmlDataDocument),
			commodityInfoPublisher: empty,
			exchangeId: MapExchangeId(fpmlDataDocument),
		}


func MapDeliveryDateParameters:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		deliveryDateReference DeliveryDateParameters (0..1)
	set deliveryDateReference:
		DeliveryDateParameters {
			deliveryNearby: MapOffset(fpmlDataDocument),
			deliveryDate: MapAdjustableDate(fpmlDataDocument),
			deliveryDateRollConvention: MapOffset(fpmlDataDocument),
			deliveryDateExpirationConvention: MapOffset(fpmlDataDocument),
		}


func MapDebtType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		debtType DebtType (0..1)
	set debtType:
		DebtType {
			debtClass: empty,
			debtEconomics: MapDebtEconomicsList(fpmlDataDocument),
		}


func MapProductList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		basketConstituentList Product (0..*)
	add basketConstituentList:
		[
			Product {
				contractualProduct: MapContractualProduct(fpmlDataDocument),
				index: MapIndex(fpmlDataDocument),
				loan: MapLoan(fpmlDataDocument),
				assetPool: MapAssetPool(fpmlDataDocument),
				foreignExchange: MapForeignExchange(fpmlDataDocument),
				commodity: MapCommodity(fpmlDataDocument),
				security: MapSecurity(fpmlDataDocument),
				basket: MapBasket(fpmlDataDocument),
			}
		]


func MapBasketConstituentList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		portfolioBasketConstituentList BasketConstituent (0..*)
	add portfolioBasketConstituentList:
		[
			BasketConstituent {
				quantity: MapNonNegativeQuantityScheduleList(fpmlDataDocument),
				initialValuationPrice: MapPriceScheduleList(fpmlDataDocument),
				interimValuationPrice: MapPriceScheduleList(fpmlDataDocument),
				finalValuationPrice: MapPriceScheduleList(fpmlDataDocument),
			}
		]


func MapPriceScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		priceList PriceSchedule (0..*)
		// [metadata location]
	add priceList:
		[
			PriceSchedule {
				perUnitOf: MapUnitType(fpmlDataDocument),
				priceType: empty,
				priceExpression: empty,
				composite: MapPriceComposite(fpmlDataDocument),
				arithmeticOperator: empty,
				cashPrice: MapCashPrice(fpmlDataDocument),
			}
		]


func MapNonNegativeQuantityScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		quantityList NonNegativeQuantitySchedule (0..*)
		// [metadata location]
	add quantityList:
		[
			NonNegativeQuantitySchedule {
			}
		]


func MapBuyerSeller:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		buyerSeller BuyerSeller (0..1)
	set buyerSeller:
		BuyerSeller {
			buyer: empty,
			seller: empty,
		}


func MapSettlementTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		settlementTerms SettlementTerms (0..1)
	set settlementTerms:
		SettlementTerms {
			cashSettlementTerms: MapCashSettlementTermsList(fpmlDataDocument),
			physicalSettlementTerms: MapPhysicalSettlementTerms(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		effectiveDate AdjustableOrRelativeDate (0..1)
	set effectiveDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapCountry:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		country string (0..1)
		// [metadata scheme]
	set country: empty

func MapAgreement:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		agreement Agreement (0..1)
	set agreement:
		Agreement {
			creditSupportAgreementElections: MapCreditSupportAgreementElections(fpmlDataDocument),
			collateralTransferAgreementElections: MapCollateralTransferAgreementElections(fpmlDataDocument),
			securityAgreementElections: MapSecurityAgreementElections(fpmlDataDocument),
			masterAgreementSchedule: MapMasterAgreementSchedule(fpmlDataDocument),
			transactionAdditionalTerms: MapTransactionAdditionalTerms(fpmlDataDocument),
		}


func MapUmbrellaAgreementEntityList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		partiesList UmbrellaAgreementEntity (0..*)
	add partiesList:
		[
			UmbrellaAgreementEntity {
				terms: empty,
			}
		]


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDate AdjustableOrRelativeDate (0..1)
	set paymentDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapPaymentRule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentRule PaymentRule (0..1)
	set paymentRule:
		PaymentRule {
			percentageRule: MapPercentageRule(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentAmount Money (0..1)
	set paymentAmount:
		Money {
		}


func MapCollateralTreatment:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		treatment CollateralTreatment (0..1)
	set treatment:
		CollateralTreatment {
			valuationTreatment: MapCollateralValuationTreatment(fpmlDataDocument),
			concentrationLimit: MapConcentrationLimitList(fpmlDataDocument),
			isIncluded: empty,
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		amountBaseCurrency Money (0..1)
	set amountBaseCurrency:
		Money {
		}


func MapPartyReferencePayerReceiver:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		payerReceiver PartyReferencePayerReceiver (0..1)
	set payerReceiver:
		PartyReferencePayerReceiver {
			payerPartyReference: MapParty(fpmlDataDocument),
			payerAccountReference: MapAccount(fpmlDataDocument),
			receiverPartyReference: MapParty(fpmlDataDocument),
			receiverAccountReference: MapAccount(fpmlDataDocument),
		}


func MapPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		noticeDeadlinePeriod Period (0..1)
	set noticeDeadlinePeriod:
		Period {
			periodMultiplier: empty,
			period: empty,
		}


func MapFloatingRateOption:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		rateOption FloatingRateOption (0..1)
		// [metadata location]
	set rateOption:
		FloatingRateOption {
			floatingRateIndex: MapFloatingRateIndex(fpmlDataDocument),
			inflationRateIndex: MapInflationRateIndex(fpmlDataDocument),
			indexTenor: MapPeriod(fpmlDataDocument),
			indexReferenceInformation: MapIndexReferenceInformation(fpmlDataDocument),
		}


func MapCommodity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		commodity Commodity (0..1)
		// [metadata location]
	set commodity:
		Commodity {
			commodityProductDefinition: MapCommodityProductDefinition(fpmlDataDocument),
			priceQuoteType: empty,
			deliveryDateReference: MapDeliveryDateParameters(fpmlDataDocument),
			description: empty,
		}


func MapProductIdentifierList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		productIdentifierList ProductIdentifier (0..*)
		// [metadata location]
	add productIdentifierList:
		[
			ProductIdentifier {
				identifier: MapIdentifier(fpmlDataDocument),
				source: empty,
			}
		]


func MapQuotedCurrencyPair:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		currencyPair QuotedCurrencyPair (0..1)
		// [metadata location]
	set currencyPair:
		QuotedCurrencyPair {
			currency1: MapCurrency1(fpmlDataDocument),
			currency2: MapCurrency2(fpmlDataDocument),
			quoteBasis: empty,
		}


func MapSourceProvider:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		sourceProvider InformationProviderEnum (0..1)
		// [metadata scheme]
	set sourceProvider: empty

func MapSourcePage:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		sourcePage string (0..1)
		// [metadata scheme]
	set sourcePage: empty

func MapAveragingCalculation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		averagingFeature AveragingCalculation (0..1)
	set averagingFeature:
		AveragingCalculation {
			averagingMethod: MapAveragingCalculationMethod(fpmlDataDocument),
			precision: MapRounding(fpmlDataDocument),
		}


func MapCommodityPriceReturnTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		commodityPriceReturnTerms CommodityPriceReturnTerms (0..1)
	set commodityPriceReturnTerms:
		CommodityPriceReturnTerms {
			rounding: MapRounding(fpmlDataDocument),
			spread: MapSpreadSchedule(fpmlDataDocument),
			rollFeature: MapRollFeature(fpmlDataDocument),
			conversionFactor: empty,
		}


func MapPricingDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		pricingDates PricingDates (0..1)
	set pricingDates:
		PricingDates {
			specifiedDates: MapAdjustableDatesList(fpmlDataDocument),
			parametricDates: MapParametricDates(fpmlDataDocument),
		}


func MapCalculationSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		schedule CalculationSchedule (0..1)
	set schedule:
		CalculationSchedule {
			schedulePeriod: MapSchedulePeriodList(fpmlDataDocument),
		}


func MapCalculationPeriodDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationPeriodDates CalculationPeriodDates (0..1)
	set calculationPeriodDates:
		CalculationPeriodDates {
			effectiveDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			terminationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			calculationPeriodDatesAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			firstPeriodStartDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			firstRegularPeriodStartDate: empty,
			firstCompoundingPeriodEndDate: empty,
			lastRegularPeriodEndDate: empty,
			stubPeriodType: empty,
			calculationPeriodFrequency: MapCalculationPeriodFrequency(fpmlDataDocument),
		}


func MapPaymentDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDates PaymentDates (0..1)
	set paymentDates:
		PaymentDates {
			paymentFrequency: MapFrequency(fpmlDataDocument),
			firstPaymentDate: empty,
			lastRegularPaymentDate: empty,
			paymentDateSchedule: MapPaymentDateSchedule(fpmlDataDocument),
			payRelativeTo: empty,
			paymentDaysOffset: MapOffset(fpmlDataDocument),
			paymentDatesAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
		}


func MapFxFeature:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fxFeature FxFeature (0..1)
	set fxFeature:
		FxFeature {
			referenceCurrency: MapReferenceCurrency(fpmlDataDocument),
			composite: MapComposite(fpmlDataDocument),
			quanto: MapQuanto(fpmlDataDocument),
			crossCurrency: MapComposite(fpmlDataDocument),
		}


func MapAssetDeliveryInformation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		delivery AssetDeliveryInformation (0..1)
	set delivery:
		AssetDeliveryInformation {
			periods: MapAssetDeliveryPeriods(fpmlDataDocument),
			location: MapLocationIdentifierList(fpmlDataDocument),
			deliveryCapacity: MapQuantity(fpmlDataDocument),
		}


func MapGeneralTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		generalTerms GeneralTerms (0..1)
	set generalTerms:
		GeneralTerms {
			referenceInformation: MapReferenceInformation(fpmlDataDocument),
			indexReferenceInformation: MapCreditIndexReferenceInformation(fpmlDataDocument),
			basketReferenceInformation: MapBasketReferenceInformation(fpmlDataDocument),
			additionalTerm: MapAdditionalTermList(fpmlDataDocument),
			substitution: empty,
			modifiedEquityDelivery: empty,
		}


func MapProtectionTermsList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		protectionTermsList ProtectionTerms (0..*)
	add protectionTermsList:
		[
			ProtectionTerms {
				creditEvents: MapCreditEvents(fpmlDataDocument),
				obligations: MapObligations(fpmlDataDocument),
				floatingAmountEvents: MapFloatingAmountEvents(fpmlDataDocument),
			}
		]


func MapTransactedPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		transactedPrice TransactedPrice (0..1)
	set transactedPrice:
		TransactedPrice {
			marketFixedRate: empty,
			initialPoints: empty,
			marketPrice: empty,
			quotationStyle: empty,
		}


func MapRateSpecification:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		rateSpecification RateSpecification (0..1)
	set rateSpecification:
		RateSpecification {
			fixedRate: MapFixedRateSpecification(fpmlDataDocument),
			floatingRate: MapFloatingRateSpecification(fpmlDataDocument),
			inflationRate: MapInflationRateSpecification(fpmlDataDocument),
		}


func MapDayCountFraction:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dayCountFraction DayCountFractionEnum (0..1)
		// [metadata scheme]
	set dayCountFraction: empty

func MapAdjustableDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDate AdjustableDate (0..1)
	set paymentDate:
		AdjustableDate {
			unadjustedDate: empty,
			dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			dateAdjustmentsReference: MapBusinessDayAdjustments(fpmlDataDocument),
			adjustedDate: MapAdjustedDate(fpmlDataDocument),
		}


func MapResetDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		resetDates ResetDates (0..1)
	set resetDates:
		ResetDates {
			calculationPeriodDatesReference: MapCalculationPeriodDates(fpmlDataDocument),
			resetRelativeTo: empty,
			initialFixingDate: MapInitialFixingDate(fpmlDataDocument),
			fixingDates: MapRelativeDateOffset(fpmlDataDocument),
			finalFixingDate: MapAdjustableDate(fpmlDataDocument),
			rateCutOffDaysOffset: MapOffset(fpmlDataDocument),
			resetFrequency: MapResetFrequency(fpmlDataDocument),
			resetDatesAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
		}


func MapDiscountingMethod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		discountingMethod DiscountingMethod (0..1)
	set discountingMethod:
		DiscountingMethod {
			discountingType: empty,
			discountRate: empty,
			discountRateDayCountFraction: MapDiscountRateDayCountFraction(fpmlDataDocument),
		}


func MapCashflowRepresentation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashflowRepresentation CashflowRepresentation (0..1)
	set cashflowRepresentation:
		CashflowRepresentation {
			cashflowsMatchParameters: empty,
			paymentCalculationPeriod: MapPaymentCalculationPeriodList(fpmlDataDocument),
		}


func MapStubPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		stubPeriod StubPeriod (0..1)
	set stubPeriod:
		StubPeriod {
			calculationPeriodDatesReference: MapCalculationPeriodDates(fpmlDataDocument),
			initialStub: MapStubValue(fpmlDataDocument),
			finalStub: MapStubValue(fpmlDataDocument),
		}


func MapBondReference:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		bondReference BondReference (0..1)
	set bondReference:
		BondReference {
			bond: MapProductIdentifier(fpmlDataDocument),
			conditionPrecedentBond: empty,
			discrepancyClause: empty,
			couponRate: MapFixedRateSpecification(fpmlDataDocument),
		}


func MapOptionFeature:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		feature OptionFeature (0..1)
	set feature:
		OptionFeature {
			fxFeature: MapFxFeatureList(fpmlDataDocument),
			strategyFeature: MapStrategyFeature(fpmlDataDocument),
			averagingFeature: MapAveragingCalculation(fpmlDataDocument),
			barrier: MapBarrier(fpmlDataDocument),
			knock: MapKnock(fpmlDataDocument),
			passThrough: MapPassThrough(fpmlDataDocument),
		}


func MapOptionExercise:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exerciseTerms OptionExercise (0..1)
	set exerciseTerms:
		OptionExercise {
			optionStyle: MapOptionStyle(fpmlDataDocument),
			strike: MapOptionStrike(fpmlDataDocument),
			exerciseProcedure: MapExerciseProcedure(fpmlDataDocument),
		}


func MapObservationTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observationTerms ObservationTerms (0..1)
	set observationTerms:
		ObservationTerms {
			pricingTime: MapBusinessCenterTime(fpmlDataDocument),
			pricingTimeType: empty,
			informationSource: MapFxSpotRateSource(fpmlDataDocument),
			precision: MapRounding(fpmlDataDocument),
			calculationPeriodDates: MapCalculationPeriodDates(fpmlDataDocument),
			observable: MapObservable(fpmlDataDocument),
			observationDates: MapObservationDates(fpmlDataDocument),
			numberOfObservationDates: empty,
		}


func MapAssetLegList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		assetLegList AssetLeg (0..*)
	add assetLegList:
		[
			AssetLeg {
				settlementDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
				deliveryMethod: empty,
			}
		]


func MapProduct:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		securityInformation Product (0..1)
	set securityInformation:
		Product {
			contractualProduct: MapContractualProduct(fpmlDataDocument),
			index: MapIndex(fpmlDataDocument),
			loan: MapLoan(fpmlDataDocument),
			assetPool: MapAssetPool(fpmlDataDocument),
			foreignExchange: MapForeignExchange(fpmlDataDocument),
			commodity: MapCommodity(fpmlDataDocument),
			security: MapSecurity(fpmlDataDocument),
			basket: MapBasket(fpmlDataDocument),
		}


func MapDuration:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		durationType Duration (0..1)
	set durationType:
		Duration {
			durationType: empty,
			evergreenProvision: MapEvergreenProvision(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		minimumFee Money (0..1)
	set minimumFee:
		Money {
		}


func MapDividendTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dividendTerms DividendTerms (0..1)
	set dividendTerms:
		DividendTerms {
			manufacturedIncomeRequirement: MapDividendPayoutRatio(fpmlDataDocument),
			dividendEntitlement: empty,
			minimumBillingAmount: MapMoney(fpmlDataDocument),
		}


func MapCashSettlementTermsList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashSettlementTermsList CashSettlementTerms (0..*)
	add cashSettlementTermsList:
		[
			CashSettlementTerms {
				cashSettlementMethod: empty,
				valuationMethod: MapValuationMethod(fpmlDataDocument),
				valuationDate: MapValuationDate(fpmlDataDocument),
				valuationTime: MapBusinessCenterTime(fpmlDataDocument),
				cashSettlementAmount: MapMoney(fpmlDataDocument),
				recoveryFactor: empty,
				fixedSettlement: empty,
				accruedInterest: empty,
			}
		]


func MapPhysicalSettlementTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		physicalSettlementTerms PhysicalSettlementTerms (0..1)
	set physicalSettlementTerms:
		PhysicalSettlementTerms {
			clearedPhysicalSettlement: empty,
			predeterminedClearingOrganizationParty: empty,
			physicalSettlementPeriod: MapPhysicalSettlementPeriod(fpmlDataDocument),
			deliverableObligations: MapDeliverableObligations(fpmlDataDocument),
			escrow: empty,
			sixtyBusinessDaySettlementCap: empty,
		}


func MapValuationDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationDates ValuationDates (0..1)
	set valuationDates:
		ValuationDates {
			valuationDatesInitial: MapPerformanceValuationDates(fpmlDataDocument),
			valuationDatesInterim: MapPerformanceValuationDates(fpmlDataDocument),
			valuationDatesFinal: MapPerformanceValuationDates(fpmlDataDocument),
		}


func MapFxFeatureList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fxFeatureList FxFeature (0..*)
	add fxFeatureList:
		[
			FxFeature {
				referenceCurrency: MapReferenceCurrency(fpmlDataDocument),
				composite: MapComposite(fpmlDataDocument),
				quanto: MapQuanto(fpmlDataDocument),
				crossCurrency: MapComposite(fpmlDataDocument),
			}
		]


func MapReturnTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		returnTerms ReturnTerms (0..1)
	set returnTerms:
		ReturnTerms {
			priceReturnTerms: MapPriceReturnTerms(fpmlDataDocument),
			dividendReturnTerms: MapDividendReturnTerms(fpmlDataDocument),
			varianceReturnTerms: MapVarianceReturnTerms(fpmlDataDocument),
			volatilityReturnTerms: MapVolatilityReturnTerms(fpmlDataDocument),
			correlationReturnTerms: MapCorrelationReturnTerms(fpmlDataDocument),
		}


func MapPortfolioReturnTermsList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		portfolioReturnTermsList PortfolioReturnTerms (0..*)
	add portfolioReturnTermsList:
		[
			PortfolioReturnTerms {
				payerReceiver: MapPayerReceiver(fpmlDataDocument),
				underlier: MapProduct(fpmlDataDocument),
				quantity: MapNonNegativeQuantityScheduleList(fpmlDataDocument),
				initialValuationPrice: MapPriceScheduleList(fpmlDataDocument),
				interimValuationPrice: MapPriceScheduleList(fpmlDataDocument),
				finalValuationPrice: MapPriceScheduleList(fpmlDataDocument),
			}
		]


func MapPriceScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		initialValuationPriceList PriceSchedule (0..*)
		// [metadata address]
	add initialValuationPriceList:
		[
			PriceSchedule {
				perUnitOf: MapUnitType(fpmlDataDocument),
				priceType: empty,
				priceExpression: empty,
				composite: MapPriceComposite(fpmlDataDocument),
				arithmeticOperator: empty,
				cashPrice: MapCashPrice(fpmlDataDocument),
			}
		]


func MapPriceScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		interimValuationPriceList PriceSchedule (0..*)
		// [metadata address]
	add interimValuationPriceList:
		[
			PriceSchedule {
				perUnitOf: MapUnitType(fpmlDataDocument),
				priceType: empty,
				priceExpression: empty,
				composite: MapPriceComposite(fpmlDataDocument),
				arithmeticOperator: empty,
				cashPrice: MapCashPrice(fpmlDataDocument),
			}
		]


func MapPriceScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		finalValuationPriceList PriceSchedule (0..*)
		// [metadata address]
	add finalValuationPriceList:
		[
			PriceSchedule {
				perUnitOf: MapUnitType(fpmlDataDocument),
				priceType: empty,
				priceExpression: empty,
				composite: MapPriceComposite(fpmlDataDocument),
				arithmeticOperator: empty,
				cashPrice: MapCashPrice(fpmlDataDocument),
			}
		]


func MapFixedPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fixedPrice FixedPrice (0..1)
	set fixedPrice:
		FixedPrice {
			price: MapPriceSchedule(fpmlDataDocument),
		}


func MapLegalEntity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		primaryObligor LegalEntity (0..1)
	set primaryObligor:
		LegalEntity {
			entityId: MapEntityIdList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
		}


func MapLegalEntity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		primaryObligorReference LegalEntity (0..1)
		// [metadata reference]
	set primaryObligorReference:
		LegalEntity {
			entityId: MapEntityIdList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
		}


func MapLegalEntity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		guarantor LegalEntity (0..1)
	set guarantor:
		LegalEntity {
			entityId: MapEntityIdList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		terminationDate AdjustableOrRelativeDate (0..1)
	set terminationDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapBusinessDayAdjustments:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dateAdjustments BusinessDayAdjustments (0..1)
	set dateAdjustments:
		BusinessDayAdjustments {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
		}


func MapPayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		payout Payout (0..1)
	set payout:
		Payout {
			interestRatePayout: MapInterestRatePayoutList(fpmlDataDocument),
			creditDefaultPayout: MapCreditDefaultPayout(fpmlDataDocument),
			optionPayout: MapOptionPayoutList(fpmlDataDocument),
			commodityPayout: MapCommodityPayoutList(fpmlDataDocument),
			forwardPayout: MapForwardPayoutList(fpmlDataDocument),
			fixedPricePayout: MapFixedPricePayoutList(fpmlDataDocument),
			securityPayout: MapSecurityPayoutList(fpmlDataDocument),
			cashflow: MapCashflowList(fpmlDataDocument),
			performancePayout: MapPerformancePayoutList(fpmlDataDocument),
			assetPayout: MapAssetPayoutList(fpmlDataDocument),
		}


func MapTerminationProvision:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		terminationProvision TerminationProvision (0..1)
	set terminationProvision:
		TerminationProvision {
			cancelableProvision: MapCancelableProvision(fpmlDataDocument),
			earlyTerminationProvision: MapEarlyTerminationProvision(fpmlDataDocument),
			evergreenProvision: MapEvergreenProvision(fpmlDataDocument),
			extendibleProvision: MapExtendibleProvision(fpmlDataDocument),
		}


func MapCalculationAgent:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationAgent CalculationAgent (0..1)
	set calculationAgent:
		CalculationAgent {
			calculationAgentParty: empty,
			calculationAgentPartyEnum: empty,
			calculationAgentBusinessCenter: MapCalculationAgentBusinessCenter(fpmlDataDocument),
		}


func MapCashflowType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashflowType CashflowType (0..1)
	set cashflowType:
		CashflowType {
			cashflowType: empty,
			cashPrice: MapCashPrice(fpmlDataDocument),
			priceExpression: empty,
		}


func MapPaymentDiscounting:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDiscounting PaymentDiscounting (0..1)
	set paymentDiscounting:
		PaymentDiscounting {
			discountFactor: empty,
			presentValueAmount: MapMoney(fpmlDataDocument),
		}


func MapCrossRateList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		crossRateList CrossRate (0..*)
	add crossRateList:
		[
			CrossRate {
				rate: empty,
				spotRate: empty,
				forwardPoints: empty,
			}
		]


func MapCommodityReferenceFramework:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceFramework CommodityReferenceFramework (0..1)
	set referenceFramework:
		CommodityReferenceFramework {
			commodityName: empty,
			capacityUnit: empty,
			weatherUnit: empty,
			currency: MapCurrency(fpmlDataDocument),
		}


func MapPriceSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		priceSource PriceSource (0..1)
	set priceSource:
		PriceSource {
			pricePublisher: MapPricePublisher(fpmlDataDocument),
			priceSourceLocation: empty,
			priceSourceHeading: empty,
			priceSourceTime: empty,
		}


func MapExchangeId:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exchangeId string (0..1)
		// [metadata scheme]
	set exchangeId: empty

func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		deliveryNearby Offset (0..1)
	set deliveryNearby:
		Offset {
			dayType: empty,
		}


func MapAdjustableDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		deliveryDate AdjustableDate (0..1)
	set deliveryDate:
		AdjustableDate {
			unadjustedDate: empty,
			dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			dateAdjustmentsReference: MapBusinessDayAdjustments(fpmlDataDocument),
			adjustedDate: MapAdjustedDate(fpmlDataDocument),
		}


func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		deliveryDateRollConvention Offset (0..1)
	set deliveryDateRollConvention:
		Offset {
			dayType: empty,
		}


func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		deliveryDateExpirationConvention Offset (0..1)
	set deliveryDateExpirationConvention:
		Offset {
			dayType: empty,
		}


func MapDebtEconomicsList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		debtEconomicsList DebtEconomics (0..*)
	add debtEconomicsList:
		[
			DebtEconomics {
				debtSeniority: empty,
				debtInterest: empty,
				debtPrincipal: empty,
			}
		]


func MapNonNegativeQuantityScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		quantityList NonNegativeQuantitySchedule (0..*)
		// [metadata address]
	add quantityList:
		[
			NonNegativeQuantitySchedule {
			}
		]


func MapUnitType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		perUnitOf UnitType (0..1)
	set perUnitOf:
		UnitType {
			capacityUnit: empty,
			weatherUnit: empty,
			financialUnit: empty,
			currency: MapCurrency(fpmlDataDocument),
		}


func MapPriceComposite:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		composite PriceComposite (0..1)
	set composite:
		PriceComposite {
			baseValue: empty,
			operand: empty,
			arithmeticOperator: empty,
			operandType: empty,
		}


func MapCashPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashPrice CashPrice (0..1)
	set cashPrice:
		CashPrice {
			cashPriceType: empty,
			premiumExpression: MapPremiumExpression(fpmlDataDocument),
			feeType: empty,
		}


func MapAdjustableDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		adjustableDate AdjustableDate (0..1)
	set adjustableDate:
		AdjustableDate {
			unadjustedDate: empty,
			dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			dateAdjustmentsReference: MapBusinessDayAdjustments(fpmlDataDocument),
			adjustedDate: MapAdjustedDate(fpmlDataDocument),
		}


func MapAdjustedRelativeDateOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		relativeDate AdjustedRelativeDateOffset (0..1)
	set relativeDate:
		AdjustedRelativeDateOffset {
			relativeDateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
		}


func MapCreditSupportAgreementElections:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		creditSupportAgreementElections CreditSupportAgreementElections (0..1)
	set creditSupportAgreementElections:
		CreditSupportAgreementElections {
		}


func MapCollateralTransferAgreementElections:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		collateralTransferAgreementElections CollateralTransferAgreementElections (0..1)
	set collateralTransferAgreementElections:
		CollateralTransferAgreementElections {
		}


func MapSecurityAgreementElections:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		securityAgreementElections SecurityAgreementElections (0..1)
	set securityAgreementElections:
		SecurityAgreementElections {
		}


func MapMasterAgreementSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		masterAgreementSchedule MasterAgreementSchedule (0..1)
	set masterAgreementSchedule:
		MasterAgreementSchedule {
			clause: MapMasterAgreementClauseList(fpmlDataDocument),
		}


func MapTransactionAdditionalTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		transactionAdditionalTerms TransactionAdditionalTerms (0..1)
	set transactionAdditionalTerms:
		TransactionAdditionalTerms {
			equityAdditionalTerms: MapEquityAdditionalTerms(fpmlDataDocument),
			foreignExchangeAdditionalTerms: MapFxAdditionalTerms(fpmlDataDocument),
			commoditiesAdditionalTerms: empty,
			creditAdditionalTerms: empty,
			interestRateAdditionalTerms: empty,
			digitalAssetAdditionalTerms: empty,
		}


func MapPercentageRule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		percentageRule PercentageRule (0..1)
	set percentageRule:
		PercentageRule {
			paymentPercent: empty,
			notionalAmountReference: MapMoney(fpmlDataDocument),
		}


func MapCollateralValuationTreatment:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationTreatment CollateralValuationTreatment (0..1)
	set valuationTreatment:
		CollateralValuationTreatment {
			haircutPercentage: empty,
			marginPercentage: empty,
			fxHaircutPercentage: empty,
			additionalHaircutPercentage: empty,
		}


func MapConcentrationLimitList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		concentrationLimitList ConcentrationLimit (0..*)
	add concentrationLimitList:
		[
			ConcentrationLimit {
				concentrationLimitCriteria: MapConcentrationLimitCriteriaList(fpmlDataDocument),
				valueLimit: MapMoneyRange(fpmlDataDocument),
				percentageLimit: MapNumberRange(fpmlDataDocument),
			}
		]


func MapParty:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		payerPartyReference Party (0..1)
		// [metadata reference]
	set payerPartyReference:
		Party {
			partyId: MapPartyIdentifierList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
			businessUnit: MapBusinessUnitList(fpmlDataDocument),
			person: MapNaturalPersonList(fpmlDataDocument),
			personRole: MapNaturalPersonRoleList(fpmlDataDocument),
			account: MapAccount(fpmlDataDocument),
			contactInformation: MapContactInformation(fpmlDataDocument),
		}


func MapAccount:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		payerAccountReference Account (0..1)
		// [metadata reference]
	set payerAccountReference:
		Account {
			partyReference: MapParty(fpmlDataDocument),
			accountNumber: MapAccountNumber(fpmlDataDocument),
			accountName: MapAccountName(fpmlDataDocument),
			accountType: MapAccountType(fpmlDataDocument),
			accountBeneficiary: MapParty(fpmlDataDocument),
			servicingParty: MapParty(fpmlDataDocument),
		}


func MapParty:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		receiverPartyReference Party (0..1)
		// [metadata reference]
	set receiverPartyReference:
		Party {
			partyId: MapPartyIdentifierList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
			businessUnit: MapBusinessUnitList(fpmlDataDocument),
			person: MapNaturalPersonList(fpmlDataDocument),
			personRole: MapNaturalPersonRoleList(fpmlDataDocument),
			account: MapAccount(fpmlDataDocument),
			contactInformation: MapContactInformation(fpmlDataDocument),
		}


func MapAccount:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		receiverAccountReference Account (0..1)
		// [metadata reference]
	set receiverAccountReference:
		Account {
			partyReference: MapParty(fpmlDataDocument),
			accountNumber: MapAccountNumber(fpmlDataDocument),
			accountName: MapAccountName(fpmlDataDocument),
			accountType: MapAccountType(fpmlDataDocument),
			accountBeneficiary: MapParty(fpmlDataDocument),
			servicingParty: MapParty(fpmlDataDocument),
		}


func MapFloatingRateIndex:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		floatingRateIndex FloatingRateIndexEnum (0..1)
		// [metadata scheme]
	set floatingRateIndex: empty

func MapInflationRateIndex:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		inflationRateIndex InflationRateIndexEnum (0..1)
		// [metadata scheme]
	set inflationRateIndex: empty

func MapPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		indexTenor Period (0..1)
	set indexTenor:
		Period {
			periodMultiplier: empty,
			period: empty,
		}


func MapIndexReferenceInformation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		indexReferenceInformation IndexReferenceInformation (0..1)
	set indexReferenceInformation:
		IndexReferenceInformation {
			indexName: MapIndexName(fpmlDataDocument),
			indexId: MapIndexIdList(fpmlDataDocument),
		}


func MapCurrency1:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		currency1 string (0..1)
		// [metadata scheme]
	set currency1: empty

func MapCurrency2:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		currency2 string (0..1)
		// [metadata scheme]
	set currency2: empty

func MapRounding:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		rounding Rounding (0..1)
	set rounding:
		Rounding {
			roundingDirection: empty,
			precision: empty,
		}


func MapSpreadSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		spread SpreadSchedule (0..1)
	set spread:
		SpreadSchedule {
			spreadScheduleType: MapSpreadScheduleType(fpmlDataDocument),
		}


func MapRollFeature:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		rollFeature RollFeature (0..1)
	set rollFeature:
		RollFeature {
			rollSourceCalendar: empty,
			deliveryDateRollConvention: MapOffset(fpmlDataDocument),
		}


func MapAdjustableDatesList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		specifiedDatesList AdjustableDates (0..*)
	add specifiedDatesList:
		[
			AdjustableDates {
				unadjustedDate: [empty],
				dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
				adjustedDate: MapAdjustedDateList(fpmlDataDocument),
			}
		]


func MapParametricDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		parametricDates ParametricDates (0..1)
	set parametricDates:
		ParametricDates {
			dayType: empty,
			dayDistribution: empty,
			dayOfWeek: [empty],
			dayFrequency: empty,
			lag: MapLag(fpmlDataDocument),
			businessCenters: MapBusinessCenters(fpmlDataDocument),
		}


func MapSchedulePeriodList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		schedulePeriodList SchedulePeriod (0..*)
	add schedulePeriodList:
		[
			SchedulePeriod {
				calculationPeriod: MapDateRange(fpmlDataDocument),
				paymentDate: empty,
				fixingPeriod: MapDateRange(fpmlDataDocument),
				deliveryPeriod: MapCalculationScheduleDeliveryPeriods(fpmlDataDocument),
			}
		]


func MapBusinessDayAdjustments:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationPeriodDatesAdjustments BusinessDayAdjustments (0..1)
	set calculationPeriodDatesAdjustments:
		BusinessDayAdjustments {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		firstPeriodStartDate AdjustableOrRelativeDate (0..1)
	set firstPeriodStartDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapCalculationPeriodFrequency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationPeriodFrequency CalculationPeriodFrequency (0..1)
	set calculationPeriodFrequency:
		CalculationPeriodFrequency {
			rollConvention: empty,
			balanceOfFirstPeriod: empty,
		}


func MapFrequency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentFrequency Frequency (0..1)
	set paymentFrequency:
		Frequency {
			periodMultiplier: empty,
			period: empty,
		}


func MapPaymentDateSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDateSchedule PaymentDateSchedule (0..1)
	set paymentDateSchedule:
		PaymentDateSchedule {
			interimPaymentDates: MapAdjustableRelativeOrPeriodicDatesList(fpmlDataDocument),
			finalPaymentDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
		}


func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDaysOffset Offset (0..1)
	set paymentDaysOffset:
		Offset {
			dayType: empty,
		}


func MapBusinessDayAdjustments:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDatesAdjustments BusinessDayAdjustments (0..1)
	set paymentDatesAdjustments:
		BusinessDayAdjustments {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
		}


func MapReferenceCurrency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceCurrency string (0..1)
		// [metadata id]
		// [metadata scheme]
	set referenceCurrency: empty

func MapComposite:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		composite Composite (0..1)
	set composite:
		Composite {
			determinationMethod: empty,
			relativeDate: MapRelativeDateOffset(fpmlDataDocument),
			fxSpotRateSource: MapFxSpotRateSource(fpmlDataDocument),
			fixingTime: MapBusinessCenterTime(fpmlDataDocument),
		}


func MapQuanto:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		quanto Quanto (0..1)
	set quanto:
		Quanto {
			fxRate: MapFxRateList(fpmlDataDocument),
			fxSpotRateSource: MapFxSpotRateSource(fpmlDataDocument),
			fixingTime: MapBusinessCenterTime(fpmlDataDocument),
		}


func MapComposite:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		crossCurrency Composite (0..1)
	set crossCurrency:
		Composite {
			determinationMethod: empty,
			relativeDate: MapRelativeDateOffset(fpmlDataDocument),
			fxSpotRateSource: MapFxSpotRateSource(fpmlDataDocument),
			fixingTime: MapBusinessCenterTime(fpmlDataDocument),
		}


func MapAssetDeliveryPeriods:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		periods AssetDeliveryPeriods (0..1)
	set periods:
		AssetDeliveryPeriods {
			profile: MapAssetDeliveryProfileList(fpmlDataDocument),
			startDate: empty,
			endDate: empty,
		}


func MapLocationIdentifierList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		locationList LocationIdentifier (0..*)
	add locationList:
		[
			LocationIdentifier {
				locationIdentifierType: empty,
			}
		]


func MapQuantity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		deliveryCapacity Quantity (0..1)
	set deliveryCapacity:
		Quantity {
		}


func MapCreditIndexReferenceInformation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		indexReferenceInformation CreditIndexReferenceInformation (0..1)
	set indexReferenceInformation:
		CreditIndexReferenceInformation {
			indexSeries: empty,
			indexAnnexVersion: empty,
			indexAnnexDate: empty,
			indexAnnexSource: MapIndexAnnexSource(fpmlDataDocument),
			excludedReferenceEntity: MapReferenceInformationList(fpmlDataDocument),
			tranche: MapTranche(fpmlDataDocument),
			settledEntityMatrix: MapSettledEntityMatrix(fpmlDataDocument),
			indexFactor: empty,
			seniority: empty,
		}


func MapBasketReferenceInformation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		basketReferenceInformation BasketReferenceInformation (0..1)
	set basketReferenceInformation:
		BasketReferenceInformation {
			basketName: MapBasketName(fpmlDataDocument),
			basketId: MapBasketIdList(fpmlDataDocument),
			referencePool: MapReferencePool(fpmlDataDocument),
			nthToDefault: empty,
			mthToDefault: empty,
			tranche: MapTranche(fpmlDataDocument),
		}


func MapAdditionalTermList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		additionalTermList string (0..*)
		// [metadata scheme]
	add additionalTermList:
		[ empty		]


func MapCreditEvents:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		creditEvents CreditEvents (0..1)
	set creditEvents:
		CreditEvents {
			bankruptcy: empty,
			failureToPay: MapFailureToPay(fpmlDataDocument),
			failureToPayPrincipal: empty,
			failureToPayInterest: empty,
			obligationDefault: empty,
			obligationAcceleration: empty,
			repudiationMoratorium: empty,
			restructuring: MapRestructuring(fpmlDataDocument),
			governmentalIntervention: empty,
			distressedRatingsDowngrade: empty,
			maturityExtension: empty,
			writedown: empty,
			impliedWritedown: empty,
			defaultRequirement: MapMoney(fpmlDataDocument),
			creditEventNotice: MapCreditEventNotice(fpmlDataDocument),
		}


func MapObligations:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		obligations Obligations (0..1)
	set obligations:
		Obligations {
			category: empty,
			notSubordinated: empty,
			specifiedCurrency: MapSpecifiedCurrency(fpmlDataDocument),
			notSovereignLender: empty,
			notDomesticCurrency: MapNotDomesticCurrency(fpmlDataDocument),
			notDomesticLaw: empty,
			listed: empty,
			notDomesticIssuance: empty,
			fullFaithAndCreditObLiability: empty,
			generalFundObligationLiability: empty,
			revenueObligationLiability: empty,
			notContingent: empty,
			excluded: empty,
			othReferenceEntityObligations: empty,
			designatedPriority: MapDesignatedPriority(fpmlDataDocument),
			cashSettlementOnly: empty,
			deliveryOfCommitments: empty,
			continuity: empty,
		}


func MapFloatingAmountEvents:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		floatingAmountEvents FloatingAmountEvents (0..1)
	set floatingAmountEvents:
		FloatingAmountEvents {
			failureToPayPrincipal: empty,
			interestShortfall: MapInterestShortFall(fpmlDataDocument),
			writedown: empty,
			impliedWritedown: empty,
			floatingAmountProvisions: MapFloatingAmountProvisions(fpmlDataDocument),
			additionalFixedPayments: MapAdditionalFixedPayments(fpmlDataDocument),
		}


func MapFixedRateSpecification:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fixedRate FixedRateSpecification (0..1)
	set fixedRate:
		FixedRateSpecification {
			rateSchedule: MapRateSchedule(fpmlDataDocument),
		}


func MapFloatingRateSpecification:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		floatingRate FloatingRateSpecification (0..1)
	set floatingRate:
		FloatingRateSpecification {
			initialRate: MapPrice(fpmlDataDocument),
			finalRateRounding: MapRounding(fpmlDataDocument),
			averagingMethod: empty,
			negativeInterestRateTreatment: empty,
		}


func MapInflationRateSpecification:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		inflationRate InflationRateSpecification (0..1)
	set inflationRate:
		InflationRateSpecification {
			inflationLag: MapOffset(fpmlDataDocument),
			indexSource: MapIndexSource(fpmlDataDocument),
			mainPublication: MapMainPublication(fpmlDataDocument),
			interpolationMethod: MapInterpolationMethod(fpmlDataDocument),
			initialIndexLevel: empty,
			fallbackBondApplicable: empty,
			calculationMethod: empty,
			calculationStyle: empty,
			finalPrincipalExchangeCalculation: empty,
		}


func MapBusinessDayAdjustments:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dateAdjustmentsReference BusinessDayAdjustments (0..1)
		// [metadata reference]
	set dateAdjustmentsReference:
		BusinessDayAdjustments {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
		}


func MapAdjustedDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		adjustedDate date (0..1)
		// [metadata id]
	set adjustedDate: empty

func MapCalculationPeriodDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationPeriodDatesReference CalculationPeriodDates (0..1)
		// [metadata reference]
	set calculationPeriodDatesReference:
		CalculationPeriodDates {
			effectiveDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			terminationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			calculationPeriodDatesAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			firstPeriodStartDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			firstRegularPeriodStartDate: empty,
			firstCompoundingPeriodEndDate: empty,
			lastRegularPeriodEndDate: empty,
			stubPeriodType: empty,
			calculationPeriodFrequency: MapCalculationPeriodFrequency(fpmlDataDocument),
		}


func MapInitialFixingDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		initialFixingDate InitialFixingDate (0..1)
	set initialFixingDate:
		InitialFixingDate {
			relativeDateOffset: MapRelativeDateOffset(fpmlDataDocument),
			initialFixingDate: empty,
		}


func MapRelativeDateOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fixingDates RelativeDateOffset (0..1)
	set fixingDates:
		RelativeDateOffset {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
			dateRelativeTo: MapDateRelativeTo(fpmlDataDocument),
			adjustedDate: empty,
		}


func MapAdjustableDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		finalFixingDate AdjustableDate (0..1)
	set finalFixingDate:
		AdjustableDate {
			unadjustedDate: empty,
			dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			dateAdjustmentsReference: MapBusinessDayAdjustments(fpmlDataDocument),
			adjustedDate: MapAdjustedDate(fpmlDataDocument),
		}


func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		rateCutOffDaysOffset Offset (0..1)
	set rateCutOffDaysOffset:
		Offset {
			dayType: empty,
		}


func MapResetFrequency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		resetFrequency ResetFrequency (0..1)
	set resetFrequency:
		ResetFrequency {
			weeklyRollConvention: empty,
		}


func MapBusinessDayAdjustments:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		resetDatesAdjustments BusinessDayAdjustments (0..1)
	set resetDatesAdjustments:
		BusinessDayAdjustments {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
		}


func MapDiscountRateDayCountFraction:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		discountRateDayCountFraction DayCountFractionEnum (0..1)
		// [metadata scheme]
	set discountRateDayCountFraction: empty

func MapPaymentCalculationPeriodList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentCalculationPeriodList PaymentCalculationPeriod (0..*)
	add paymentCalculationPeriodList:
		[
			PaymentCalculationPeriod {
				unadjustedPaymentDate: empty,
				adjustedPaymentDate: empty,
				calculationPeriod: MapCalculationPeriodList(fpmlDataDocument),
				fixedPaymentAmount: MapMoney(fpmlDataDocument),
				discountFactor: empty,
				forecastPaymentAmount: MapMoney(fpmlDataDocument),
				presentValueAmount: MapMoney(fpmlDataDocument),
			}
		]


func MapStubValue:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		initialStub StubValue (0..1)
	set initialStub:
		StubValue {
			floatingRate: MapStubFloatingRateList(fpmlDataDocument),
			stubRate: empty,
			stubAmount: MapMoney(fpmlDataDocument),
		}


func MapStubValue:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		finalStub StubValue (0..1)
	set finalStub:
		StubValue {
			floatingRate: MapStubFloatingRateList(fpmlDataDocument),
			stubRate: empty,
			stubAmount: MapMoney(fpmlDataDocument),
		}


func MapProductIdentifier:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		bond ProductIdentifier (0..1)
	set bond:
		ProductIdentifier {
			identifier: MapIdentifier(fpmlDataDocument),
			source: empty,
		}


func MapFixedRateSpecification:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		couponRate FixedRateSpecification (0..1)
	set couponRate:
		FixedRateSpecification {
			rateSchedule: MapRateSchedule(fpmlDataDocument),
		}


func MapStrategyFeature:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		strategyFeature StrategyFeature (0..1)
	set strategyFeature:
		StrategyFeature {
			strikeSpread: MapStrikeSpread(fpmlDataDocument),
			calendarSpread: MapCalendarSpread(fpmlDataDocument),
		}


func MapBarrier:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		barrier Barrier (0..1)
	set barrier:
		Barrier {
			barrierCap: MapTriggerEvent(fpmlDataDocument),
			barrierFloor: MapTriggerEvent(fpmlDataDocument),
		}


func MapKnock:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		knock Knock (0..1)
	set knock:
		Knock {
			knockIn: MapTriggerEvent(fpmlDataDocument),
			knockOut: MapTriggerEvent(fpmlDataDocument),
		}


func MapPassThrough:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		passThrough PassThrough (0..1)
	set passThrough:
		PassThrough {
			passThroughItem: MapPassThroughItemList(fpmlDataDocument),
		}


func MapOptionStyle:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		optionStyle OptionStyle (0..1)
	set optionStyle:
		OptionStyle {
			americanExercise: MapAmericanExercise(fpmlDataDocument),
			bermudaExercise: MapBermudaExercise(fpmlDataDocument),
			europeanExercise: MapEuropeanExercise(fpmlDataDocument),
		}


func MapOptionStrike:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		strike OptionStrike (0..1)
	set strike:
		OptionStrike {
			strikePrice: MapPrice(fpmlDataDocument),
			strikeReference: MapFixedRateSpecification(fpmlDataDocument),
			referenceSwapCurve: MapReferenceSwapCurve(fpmlDataDocument),
			averagingStrikeFeature: MapAveragingStrikeFeature(fpmlDataDocument),
		}


func MapExerciseProcedure:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exerciseProcedure ExerciseProcedure (0..1)
	set exerciseProcedure:
		ExerciseProcedure {
			manualExercise: MapManualExercise(fpmlDataDocument),
			automaticExercise: MapAutomaticExercise(fpmlDataDocument),
			followUpConfirmation: empty,
			limitedRightToConfirm: empty,
			splitTicket: empty,
		}


func MapBusinessCenterTime:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		pricingTime BusinessCenterTime (0..1)
	set pricingTime:
		BusinessCenterTime {
			hourMinuteTime: empty,
			businessCenter: MapBusinessCenter(fpmlDataDocument),
		}


func MapFxSpotRateSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		informationSource FxSpotRateSource (0..1)
	set informationSource:
		FxSpotRateSource {
			primarySource: MapInformationSource(fpmlDataDocument),
			secondarySource: MapInformationSource(fpmlDataDocument),
		}


func MapObservationDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observationDates ObservationDates (0..1)
	set observationDates:
		ObservationDates {
			observationSchedule: MapObservationSchedule(fpmlDataDocument),
			periodicSchedule: MapPeriodicDates(fpmlDataDocument),
			parametricDates: MapParametricDates(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		settlementDate AdjustableOrRelativeDate (0..1)
	set settlementDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapEvergreenProvision:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		evergreenProvision EvergreenProvision (0..1)
	set evergreenProvision:
		EvergreenProvision {
			singlePartyOption: MapPartyRole(fpmlDataDocument),
			noticePeriod: MapRelativeDateOffset(fpmlDataDocument),
			noticeDeadlinePeriod: MapRelativeDateOffset(fpmlDataDocument),
			noticeDeadlineDateTime: empty,
			extensionFrequency: MapAdjustableRelativeOrPeriodicDates(fpmlDataDocument),
			finalPeriodFeeAdjustment: MapPrice(fpmlDataDocument),
		}


func MapDividendPayoutRatio:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		manufacturedIncomeRequirement DividendPayoutRatio (0..1)
	set manufacturedIncomeRequirement:
		DividendPayoutRatio {
			totalRatio: empty,
			cashRatio: empty,
			nonCashRatio: empty,
			basketConstituent: MapProduct(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		minimumBillingAmount Money (0..1)
	set minimumBillingAmount:
		Money {
		}


func MapValuationMethod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationMethod ValuationMethod (0..1)
	set valuationMethod:
		ValuationMethod {
			valuationSource: MapValuationSource(fpmlDataDocument),
			quotationMethod: empty,
			valuationMethod: empty,
			quotationAmount: MapMoney(fpmlDataDocument),
			minimumQuotationAmount: MapMoney(fpmlDataDocument),
			cashCollateralValuationMethod: MapCashCollateralValuationMethod(fpmlDataDocument),
		}


func MapValuationDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationDate ValuationDate (0..1)
	set valuationDate:
		ValuationDate {
			singleValuationDate: MapSingleValuationDate(fpmlDataDocument),
			multipleValuationDates: MapMultipleValuationDates(fpmlDataDocument),
			valuationDate: MapRelativeDateOffset(fpmlDataDocument),
			fxFixingDate: MapFxFixingDate(fpmlDataDocument),
			fxFixingSchedule: MapAdjustableDates(fpmlDataDocument),
		}


func MapBusinessCenterTime:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationTime BusinessCenterTime (0..1)
	set valuationTime:
		BusinessCenterTime {
			hourMinuteTime: empty,
			businessCenter: MapBusinessCenter(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashSettlementAmount Money (0..1)
	set cashSettlementAmount:
		Money {
		}


func MapPhysicalSettlementPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		physicalSettlementPeriod PhysicalSettlementPeriod (0..1)
	set physicalSettlementPeriod:
		PhysicalSettlementPeriod {
			businessDaysNotSpecified: empty,
			businessDays: empty,
			maximumBusinessDays: empty,
		}


func MapDeliverableObligations:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		deliverableObligations DeliverableObligations (0..1)
	set deliverableObligations:
		DeliverableObligations {
			accruedInterest: empty,
			category: empty,
			notSubordinated: empty,
			specifiedCurrency: MapSpecifiedCurrency(fpmlDataDocument),
			notSovereignLender: empty,
			notDomesticCurrency: MapNotDomesticCurrency(fpmlDataDocument),
			notDomesticLaw: empty,
			listed: empty,
			notContingent: empty,
			notDomesticIssuance: empty,
			assignableLoan: MapPCDeliverableObligationCharac(fpmlDataDocument),
			consentRequiredLoan: MapPCDeliverableObligationCharac(fpmlDataDocument),
			directLoanParticipation: MapLoanParticipation(fpmlDataDocument),
			transferable: empty,
			maximumMaturity: MapPeriod(fpmlDataDocument),
			acceleratedOrMatured: empty,
			notBearer: empty,
			fullFaithAndCreditObLiability: empty,
			generalFundObligationLiability: empty,
			revenueObligationLiability: empty,
			indirectLoanParticipation: MapLoanParticipation(fpmlDataDocument),
			excluded: empty,
			othReferenceEntityObligations: empty,
		}


func MapPerformanceValuationDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationDatesInitial PerformanceValuationDates (0..1)
	set valuationDatesInitial:
		PerformanceValuationDates {
			determinationMethod: empty,
			valuationDates: MapAdjustableRelativeOrPeriodicDates(fpmlDataDocument),
			valuationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			valuationTime: MapBusinessCenterTime(fpmlDataDocument),
			valuationTimeType: empty,
		}


func MapPerformanceValuationDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationDatesInterim PerformanceValuationDates (0..1)
	set valuationDatesInterim:
		PerformanceValuationDates {
			determinationMethod: empty,
			valuationDates: MapAdjustableRelativeOrPeriodicDates(fpmlDataDocument),
			valuationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			valuationTime: MapBusinessCenterTime(fpmlDataDocument),
			valuationTimeType: empty,
		}


func MapPerformanceValuationDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationDatesFinal PerformanceValuationDates (0..1)
	set valuationDatesFinal:
		PerformanceValuationDates {
			determinationMethod: empty,
			valuationDates: MapAdjustableRelativeOrPeriodicDates(fpmlDataDocument),
			valuationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			valuationTime: MapBusinessCenterTime(fpmlDataDocument),
			valuationTimeType: empty,
		}


func MapPriceReturnTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		priceReturnTerms PriceReturnTerms (0..1)
	set priceReturnTerms:
		PriceReturnTerms {
			valuationPriceInitial: MapPriceSchedule(fpmlDataDocument),
			valuationPriceFinal: MapPriceSchedule(fpmlDataDocument),
			returnType: empty,
			conversionFactor: empty,
			performance: empty,
		}


func MapDividendReturnTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dividendReturnTerms DividendReturnTerms (0..1)
	set dividendReturnTerms:
		DividendReturnTerms {
			dividendPayoutRatio: MapDividendPayoutRatioList(fpmlDataDocument),
			dividendReinvestment: empty,
			dividendEntitlement: empty,
			dividendAmountType: empty,
			performance: empty,
			firstOrSecondPeriod: empty,
			extraordinaryDividendsParty: empty,
			excessDividendAmount: empty,
			dividendCurrency: MapDividendCurrency(fpmlDataDocument),
			nonCashDividendTreatment: empty,
			dividendComposition: empty,
			specialDividends: empty,
			materialDividend: empty,
			dividendPeriod: MapDividendPeriodList(fpmlDataDocument),
		}


func MapVarianceReturnTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		varianceReturnTerms VarianceReturnTerms (0..1)
	set varianceReturnTerms:
		VarianceReturnTerms {
			varianceStrikePrice: MapPrice(fpmlDataDocument),
			volatilityStrikePrice: MapPrice(fpmlDataDocument),
			varianceCapFloor: MapVarianceCapFloor(fpmlDataDocument),
			volatilityCapFloor: MapVolatilityCapFloor(fpmlDataDocument),
			vegaNotionalAmount: MapNonNegativeQuantitySchedule(fpmlDataDocument),
			exchangeTradedContractNearest: MapObservable(fpmlDataDocument),
		}


func MapVolatilityReturnTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		volatilityReturnTerms VolatilityReturnTerms (0..1)
	set volatilityReturnTerms:
		VolatilityReturnTerms {
			volatilityStrikePrice: MapPrice(fpmlDataDocument),
			volatilityCapFloor: MapVolatilityCapFloor(fpmlDataDocument),
			exchangeTradedContractNearest: MapObservable(fpmlDataDocument),
		}


func MapCorrelationReturnTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		correlationReturnTerms CorrelationReturnTerms (0..1)
	set correlationReturnTerms:
		CorrelationReturnTerms {
			correlationStrikePrice: MapPrice(fpmlDataDocument),
			boundedCorrelation: MapNumberRange(fpmlDataDocument),
			numberOfDataSeries: empty,
		}


func MapPayerReceiver:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		payerReceiver PayerReceiver (0..1)
	set payerReceiver:
		PayerReceiver {
			payer: empty,
			receiver: empty,
		}


func MapPriceSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		price PriceSchedule (0..1)
		// [metadata address]
	set price:
		PriceSchedule {
			perUnitOf: MapUnitType(fpmlDataDocument),
			priceType: empty,
			priceExpression: empty,
			composite: MapPriceComposite(fpmlDataDocument),
			arithmeticOperator: empty,
			cashPrice: MapCashPrice(fpmlDataDocument),
		}


func MapBusinessCenters:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		businessCenters BusinessCenters (0..1)
	set businessCenters:
		BusinessCenters {
			businessCenter: MapBusinessCenterList(fpmlDataDocument),
			commodityBusinessCalendar: MapCommodityBusinessCalendarList(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
		}


func MapInterestRatePayoutList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		interestRatePayoutList InterestRatePayout (0..*)
	add interestRatePayoutList:
		[
			InterestRatePayout {
				rateSpecification: MapRateSpecification(fpmlDataDocument),
				dayCountFraction: MapDayCountFraction(fpmlDataDocument),
				calculationPeriodDates: MapCalculationPeriodDates(fpmlDataDocument),
				paymentDates: MapPaymentDates(fpmlDataDocument),
				paymentDate: MapAdjustableDate(fpmlDataDocument),
				paymentDelay: empty,
				resetDates: MapResetDates(fpmlDataDocument),
				discountingMethod: MapDiscountingMethod(fpmlDataDocument),
				compoundingMethod: empty,
				cashflowRepresentation: MapCashflowRepresentation(fpmlDataDocument),
				stubPeriod: MapStubPeriod(fpmlDataDocument),
				bondReference: MapBondReference(fpmlDataDocument),
				fixedAmount: empty,
				floatingAmount: empty,
				spreadCalculationMethod: empty,
			}
		]


func MapCreditDefaultPayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		creditDefaultPayout CreditDefaultPayout (0..1)
	set creditDefaultPayout:
		CreditDefaultPayout {
			generalTerms: MapGeneralTerms(fpmlDataDocument),
			protectionTerms: MapProtectionTermsList(fpmlDataDocument),
			transactedPrice: MapTransactedPrice(fpmlDataDocument),
		}


func MapOptionPayoutList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		optionPayoutList OptionPayout (0..*)
	add optionPayoutList:
		[
			OptionPayout {
				buyerSeller: MapBuyerSeller(fpmlDataDocument),
				optionType: empty,
				feature: MapOptionFeature(fpmlDataDocument),
				exerciseTerms: MapOptionExercise(fpmlDataDocument),
				underlier: MapProduct(fpmlDataDocument),
				observationTerms: MapObservationTerms(fpmlDataDocument),
				schedule: MapCalculationSchedule(fpmlDataDocument),
				delivery: MapAssetDeliveryInformation(fpmlDataDocument),
			}
		]


func MapCommodityPayoutList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		commodityPayoutList CommodityPayout (0..*)
	add commodityPayoutList:
		[
			CommodityPayout {
				averagingFeature: MapAveragingCalculation(fpmlDataDocument),
				commodityPriceReturnTerms: MapCommodityPriceReturnTerms(fpmlDataDocument),
				pricingDates: MapPricingDates(fpmlDataDocument),
				schedule: MapCalculationSchedule(fpmlDataDocument),
				calculationPeriodDates: MapCalculationPeriodDates(fpmlDataDocument),
				paymentDates: MapPaymentDates(fpmlDataDocument),
				underlier: MapProduct(fpmlDataDocument),
				fxFeature: MapFxFeature(fpmlDataDocument),
				delivery: MapAssetDeliveryInformation(fpmlDataDocument),
			}
		]


func MapForwardPayoutList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		forwardPayoutList ForwardPayout (0..*)
	add forwardPayoutList:
		[
			ForwardPayout {
				underlier: MapProduct(fpmlDataDocument),
				deliveryTerm: empty,
				delivery: MapAssetDeliveryInformation(fpmlDataDocument),
				schedule: MapCalculationSchedule(fpmlDataDocument),
			}
		]


func MapFixedPricePayoutList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fixedPricePayoutList FixedPricePayout (0..*)
	add fixedPricePayoutList:
		[
			FixedPricePayout {
				paymentDates: MapPaymentDates(fpmlDataDocument),
				fixedPrice: MapFixedPrice(fpmlDataDocument),
				schedule: MapCalculationSchedule(fpmlDataDocument),
			}
		]


func MapSecurityPayoutList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		securityPayoutList SecurityPayout (0..*)
	add securityPayoutList:
		[
			SecurityPayout {
				securityLeg: MapSecurityLegList(fpmlDataDocument),
				initialMargin: MapInitialMargin(fpmlDataDocument),
				repoDuration: empty,
				securityValuation: MapSecurityValuationList(fpmlDataDocument),
			}
		]


func MapCashflowList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashflowList Cashflow (0..*)
	add cashflowList:
		[
			Cashflow {
				cashflowType: MapCashflowType(fpmlDataDocument),
				paymentDiscounting: MapPaymentDiscounting(fpmlDataDocument),
			}
		]


func MapPerformancePayoutList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		performancePayoutList PerformancePayout (0..*)
	add performancePayoutList:
		[
			PerformancePayout {
				observationTerms: MapObservationTerms(fpmlDataDocument),
				valuationDates: MapValuationDates(fpmlDataDocument),
				paymentDates: MapPaymentDates(fpmlDataDocument),
				underlier: MapProduct(fpmlDataDocument),
				fxFeature: MapFxFeatureList(fpmlDataDocument),
				returnTerms: MapReturnTerms(fpmlDataDocument),
				portfolioReturnTerms: MapPortfolioReturnTermsList(fpmlDataDocument),
				initialValuationPrice: MapPriceScheduleList(fpmlDataDocument),
				interimValuationPrice: MapPriceScheduleList(fpmlDataDocument),
				finalValuationPrice: MapPriceScheduleList(fpmlDataDocument),
			}
		]


func MapAssetPayoutList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		assetPayoutList AssetPayout (0..*)
	add assetPayoutList:
		[
			AssetPayout {
				assetLeg: MapAssetLegList(fpmlDataDocument),
				securityInformation: MapProduct(fpmlDataDocument),
				durationType: MapDuration(fpmlDataDocument),
				minimumFee: MapMoney(fpmlDataDocument),
				dividendTerms: MapDividendTerms(fpmlDataDocument),
			}
		]


func MapCancelableProvision:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cancelableProvision CancelableProvision (0..1)
	set cancelableProvision:
		CancelableProvision {
			americanExercise: MapAmericanExercise(fpmlDataDocument),
			bermudaExercise: MapBermudaExercise(fpmlDataDocument),
			europeanExercise: MapEuropeanExercise(fpmlDataDocument),
			exerciseNotice: MapExerciseNotice(fpmlDataDocument),
			followUpConfirmation: empty,
			cancelableProvisionAdjustedDates: MapCancelableProvisionAdjustedDates(fpmlDataDocument),
			finalCalculationPeriodDateAdjustment: MapFinalCalculationPeriodDateAdjustmentList(fpmlDataDocument),
			initialFee: MapTransfer(fpmlDataDocument),
			callingParty: empty,
			earliestDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			expirationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			effectiveDate: MapAdjustableOrRelativeDates(fpmlDataDocument),
			effectivePeriod: MapPeriod(fpmlDataDocument),
			earliestCancellationTime: MapBusinessCenterTime(fpmlDataDocument),
			latestCancelationTime: MapBusinessCenterTime(fpmlDataDocument),
		}


func MapEarlyTerminationProvision:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		earlyTerminationProvision EarlyTerminationProvision (0..1)
	set earlyTerminationProvision:
		EarlyTerminationProvision {
			mandatoryEarlyTermination: MapMandatoryEarlyTermination(fpmlDataDocument),
			mandatoryEarlyTerminationDateTenor: MapPeriod(fpmlDataDocument),
			optionalEarlyTermination: MapOptionalEarlyTermination(fpmlDataDocument),
			optionalEarlyTerminationParameters: MapExercisePeriod(fpmlDataDocument),
		}


func MapExtendibleProvision:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		extendibleProvision ExtendibleProvision (0..1)
	set extendibleProvision:
		ExtendibleProvision {
			americanExercise: MapAmericanExercise(fpmlDataDocument),
			bermudaExercise: MapBermudaExercise(fpmlDataDocument),
			europeanExercise: MapEuropeanExercise(fpmlDataDocument),
			exerciseNotice: MapExerciseNotice(fpmlDataDocument),
			followUpConfirmation: empty,
			extendibleProvisionAdjustedDates: MapExtendibleProvisionAdjustedDates(fpmlDataDocument),
			callingParty: empty,
			singlePartyOption: MapPartyRole(fpmlDataDocument),
			noticeDeadlinePeriod: MapRelativeDateOffset(fpmlDataDocument),
			noticeDeadlineDateTime: empty,
			extensionTerm: MapRelativeDateOffset(fpmlDataDocument),
			extensionPeriod: MapAdjustableRelativeOrPeriodicDates(fpmlDataDocument),
		}


func MapCalculationAgentBusinessCenter:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationAgentBusinessCenter BusinessCenterEnum (0..1)
		// [metadata scheme]
	set calculationAgentBusinessCenter: empty

func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		presentValueAmount Money (0..1)
	set presentValueAmount:
		Money {
		}


func MapCurrency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		currency string (0..1)
		// [metadata scheme]
	set currency: empty

func MapPricePublisher:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		pricePublisher string (0..1)
		// [metadata scheme]
	set pricePublisher: empty

func MapPremiumExpression:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		premiumExpression PremiumExpression (0..1)
	set premiumExpression:
		PremiumExpression {
			premiumType: empty,
			pricePerOption: MapMoney(fpmlDataDocument),
			percentageOfNotional: empty,
		}


func MapBusinessDayAdjustments:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		relativeDateAdjustments BusinessDayAdjustments (0..1)
	set relativeDateAdjustments:
		BusinessDayAdjustments {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
		}


func MapMasterAgreementClauseList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		clauseList MasterAgreementClause (0..*)
	add clauseList:
		[
			MasterAgreementClause {
				identifer: empty,
				name: empty,
				counterparty: [empty],
				otherParty: [empty],
				variant: MapMasterAgreementClauseVariantList(fpmlDataDocument),
			}
		]


func MapEquityAdditionalTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		equityAdditionalTerms EquityAdditionalTerms (0..1)
	set equityAdditionalTerms:
		EquityAdditionalTerms {
			extraordinaryEvents: MapExtraordinaryEvents(fpmlDataDocument),
			determinationTerms: MapDeterminationRolesAndTermsList(fpmlDataDocument),
			substitutionProvision: MapUnderlierSubstitutionProvision(fpmlDataDocument),
		}


func MapFxAdditionalTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		foreignExchangeAdditionalTerms FxAdditionalTerms (0..1)
	set foreignExchangeAdditionalTerms:
		FxAdditionalTerms {
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		notionalAmountReference Money (0..1)
		// [metadata reference]
	set notionalAmountReference:
		Money {
		}


func MapConcentrationLimitCriteriaList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		concentrationLimitCriteriaList ConcentrationLimitCriteria (0..*)
	add concentrationLimitCriteriaList:
		[
			ConcentrationLimitCriteria {
				concentrationLimitType: empty,
				averageTradingVolume: MapAverageTradingVolume(fpmlDataDocument),
			}
		]


func MapMoneyRange:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valueLimit MoneyRange (0..1)
	set valueLimit:
		MoneyRange {
			lowerBound: MapMoneyBound(fpmlDataDocument),
			upperBound: MapMoneyBound(fpmlDataDocument),
		}


func MapNumberRange:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		percentageLimit NumberRange (0..1)
	set percentageLimit:
		NumberRange {
			lowerBound: MapNumberBound(fpmlDataDocument),
			upperBound: MapNumberBound(fpmlDataDocument),
		}


func MapIndexName:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		indexName string (0..1)
		// [metadata scheme]
	set indexName: empty

func MapIndexIdList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		indexIdList string (0..*)
		// [metadata scheme]
	add indexIdList:
		[ empty		]


func MapSpreadScheduleType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		spreadScheduleType SpreadScheduleTypeEnum (0..1)
		// [metadata scheme]
	set spreadScheduleType: empty

func MapAdjustedDateList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		adjustedDateList date (0..*)
		// [metadata id]
	add adjustedDateList:
		[ empty		]


func MapLag:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		lag Lag (0..1)
	set lag:
		Lag {
			lagDuration: MapOffset(fpmlDataDocument),
			firstObservationDateOffset: MapOffset(fpmlDataDocument),
		}


func MapDateRange:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationPeriod DateRange (0..1)
	set calculationPeriod:
		DateRange {
			startDate: empty,
			endDate: empty,
		}


func MapDateRange:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fixingPeriod DateRange (0..1)
	set fixingPeriod:
		DateRange {
			startDate: empty,
			endDate: empty,
		}


func MapCalculationScheduleDeliveryPeriods:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		deliveryPeriod CalculationScheduleDeliveryPeriods (0..1)
	set deliveryPeriod:
		CalculationScheduleDeliveryPeriods {
			deliveryCapacity: MapQuantity(fpmlDataDocument),
			priceTimeIntervalQuantity: MapPrice(fpmlDataDocument),
		}


func MapAdjustableRelativeOrPeriodicDatesList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		interimPaymentDatesList AdjustableRelativeOrPeriodicDates (0..*)
	add interimPaymentDatesList:
		[
			AdjustableRelativeOrPeriodicDates {
				adjustableDates: MapAdjustableDates(fpmlDataDocument),
				relativeDates: MapRelativeDates(fpmlDataDocument),
				periodicDates: MapPeriodicDates(fpmlDataDocument),
			}
		]


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		finalPaymentDate AdjustableOrRelativeDate (0..1)
	set finalPaymentDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapRelativeDateOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		relativeDate RelativeDateOffset (0..1)
	set relativeDate:
		RelativeDateOffset {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
			dateRelativeTo: MapDateRelativeTo(fpmlDataDocument),
			adjustedDate: empty,
		}


func MapFxSpotRateSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fxSpotRateSource FxSpotRateSource (0..1)
	set fxSpotRateSource:
		FxSpotRateSource {
			primarySource: MapInformationSource(fpmlDataDocument),
			secondarySource: MapInformationSource(fpmlDataDocument),
		}


func MapBusinessCenterTime:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fixingTime BusinessCenterTime (0..1)
	set fixingTime:
		BusinessCenterTime {
			hourMinuteTime: empty,
			businessCenter: MapBusinessCenter(fpmlDataDocument),
		}


func MapFxRateList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fxRateList FxRate (0..*)
	add fxRateList:
		[
			FxRate {
				quotedCurrencyPair: MapQuotedCurrencyPair(fpmlDataDocument),
				rate: empty,
			}
		]


func MapAssetDeliveryProfileList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		profileList AssetDeliveryProfile (0..*)
	add profileList:
		[
			AssetDeliveryProfile {
				loadType: empty,
				block: MapAssetDeliveryProfileBlockList(fpmlDataDocument),
				bankHolidaysTreatment: empty,
			}
		]


func MapIndexAnnexSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		indexAnnexSource IndexAnnexSourceEnum (0..1)
		// [metadata scheme]
	set indexAnnexSource: empty

func MapReferenceInformationList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		excludedReferenceEntityList ReferenceInformation (0..*)
	add excludedReferenceEntityList:
		[
			ReferenceInformation {
				referenceEntity: MapLegalEntity(fpmlDataDocument),
				referenceObligation: MapReferenceObligationList(fpmlDataDocument),
				noReferenceObligation: empty,
				unknownReferenceObligation: empty,
				allGuarantees: empty,
				referencePrice: MapPrice(fpmlDataDocument),
				referencePolicy: empty,
				securedList: empty,
			}
		]


func MapTranche:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tranche Tranche (0..1)
	set tranche:
		Tranche {
			attachmentPoint: empty,
			exhaustionPoint: empty,
			incurredRecoveryApplicable: empty,
		}


func MapSettledEntityMatrix:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		settledEntityMatrix SettledEntityMatrix (0..1)
	set settledEntityMatrix:
		SettledEntityMatrix {
			matrixSource: MapMatrixSource(fpmlDataDocument),
			publicationDate: empty,
		}


func MapBasketName:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		basketName string (0..1)
		// [metadata scheme]
	set basketName: empty

func MapBasketIdList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		basketIdList string (0..*)
		// [metadata scheme]
	add basketIdList:
		[ empty		]


func MapReferencePool:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referencePool ReferencePool (0..1)
	set referencePool:
		ReferencePool {
			referencePoolItem: MapReferencePoolItemList(fpmlDataDocument),
		}


func MapFailureToPay:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		failureToPay FailureToPay (0..1)
	set failureToPay:
		FailureToPay {
			applicable: empty,
			gracePeriodExtension: MapGracePeriodExtension(fpmlDataDocument),
			paymentRequirement: MapMoney(fpmlDataDocument),
		}


func MapRestructuring:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		restructuring Restructuring (0..1)
	set restructuring:
		Restructuring {
			applicable: empty,
			restructuringType: MapRestructuringType(fpmlDataDocument),
			multipleHolderObligation: empty,
			multipleCreditEventNotices: empty,
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		defaultRequirement Money (0..1)
	set defaultRequirement:
		Money {
		}


func MapCreditEventNotice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		creditEventNotice CreditEventNotice (0..1)
	set creditEventNotice:
		CreditEventNotice {
			notifyingParty: [empty],
			businessCenter: empty,
			publiclyAvailableInformation: MapPubliclyAvailableInformation(fpmlDataDocument),
		}


func MapSpecifiedCurrency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		specifiedCurrency SpecifiedCurrency (0..1)
	set specifiedCurrency:
		SpecifiedCurrency {
			applicable: empty,
			currency: MapCurrency(fpmlDataDocument),
		}


func MapNotDomesticCurrency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		notDomesticCurrency NotDomesticCurrency (0..1)
	set notDomesticCurrency:
		NotDomesticCurrency {
			applicable: empty,
			currency: MapCurrency(fpmlDataDocument),
		}


func MapDesignatedPriority:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		designatedPriority string (0..1)
		// [metadata scheme]
	set designatedPriority: empty

func MapInterestShortFall:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		interestShortfall InterestShortFall (0..1)
	set interestShortfall:
		InterestShortFall {
			interestShortfallCap: empty,
			compounding: empty,
			rateSource: MapRateSource(fpmlDataDocument),
		}


func MapFloatingAmountProvisions:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		floatingAmountProvisions FloatingAmountProvisions (0..1)
	set floatingAmountProvisions:
		FloatingAmountProvisions {
			wacCapInterestProvision: empty,
			stepUpProvision: empty,
		}


func MapAdditionalFixedPayments:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		additionalFixedPayments AdditionalFixedPayments (0..1)
	set additionalFixedPayments:
		AdditionalFixedPayments {
			interestShortfallReimbursement: empty,
			principalShortfallReimbursement: empty,
			writedownReimbursement: empty,
		}


func MapRateSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		rateSchedule RateSchedule (0..1)
	set rateSchedule:
		RateSchedule {
			price: MapPriceSchedule(fpmlDataDocument),
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		initialRate Price (0..1)
	set initialRate:
		Price {
		}


func MapRounding:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		finalRateRounding Rounding (0..1)
	set finalRateRounding:
		Rounding {
			roundingDirection: empty,
			precision: empty,
		}


func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		inflationLag Offset (0..1)
	set inflationLag:
		Offset {
			dayType: empty,
		}


func MapIndexSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		indexSource string (0..1)
		// [metadata scheme]
	set indexSource: empty

func MapMainPublication:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		mainPublication string (0..1)
		// [metadata scheme]
	set mainPublication: empty

func MapInterpolationMethod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		interpolationMethod InterpolationMethodEnum (0..1)
		// [metadata scheme]
	set interpolationMethod: empty

func MapRelativeDateOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		relativeDateOffset RelativeDateOffset (0..1)
	set relativeDateOffset:
		RelativeDateOffset {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
			dateRelativeTo: MapDateRelativeTo(fpmlDataDocument),
			adjustedDate: empty,
		}


func MapBusinessCenters:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		businessCentersReference BusinessCenters (0..1)
		// [metadata reference]
	set businessCentersReference:
		BusinessCenters {
			businessCenter: MapBusinessCenterList(fpmlDataDocument),
			commodityBusinessCalendar: MapCommodityBusinessCalendarList(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
		}


func MapDateRelativeTo:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dateRelativeTo date (0..1)
		// [metadata reference]
	set dateRelativeTo: empty

func MapCalculationPeriodList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationPeriodList CalculationPeriod (0..*)
	add calculationPeriodList:
		[
			CalculationPeriod {
				unadjustedStartDate: empty,
				unadjustedEndDate: empty,
				calculationPeriodNumberOfDays: empty,
				notionalAmount: empty,
				fxLinkedNotionalAmount: MapFxLinkedNotionalAmount(fpmlDataDocument),
				floatingRateDefinition: MapFloatingRateDefinition(fpmlDataDocument),
				fixedRate: empty,
				dayCountYearFraction: empty,
				forecastAmount: MapMoney(fpmlDataDocument),
				forecastRate: empty,
			}
		]


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fixedPaymentAmount Money (0..1)
	set fixedPaymentAmount:
		Money {
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		forecastPaymentAmount Money (0..1)
	set forecastPaymentAmount:
		Money {
		}


func MapStubFloatingRateList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		floatingRateList StubFloatingRate (0..*)
	add floatingRateList:
		[
			StubFloatingRate {
				floatingRateIndex: empty,
				indexTenor: MapPeriod(fpmlDataDocument),
				floatingRateMultiplierSchedule: MapSchedule(fpmlDataDocument),
				spreadSchedule: MapSpreadScheduleList(fpmlDataDocument),
				rateTreatment: empty,
				capRateSchedule: MapStrikeScheduleList(fpmlDataDocument),
				floorRateSchedule: MapStrikeScheduleList(fpmlDataDocument),
			}
		]


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		stubAmount Money (0..1)
	set stubAmount:
		Money {
		}


func MapStrikeSpread:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		strikeSpread StrikeSpread (0..1)
	set strikeSpread:
		StrikeSpread {
			upperStrike: MapOptionStrike(fpmlDataDocument),
			upperStrikeNumberOfOptions: empty,
		}


func MapCalendarSpread:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calendarSpread CalendarSpread (0..1)
	set calendarSpread:
		CalendarSpread {
			expirationDateTwo: MapAdjustableOrRelativeDate(fpmlDataDocument),
		}


func MapTriggerEvent:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		barrierCap TriggerEvent (0..1)
	set barrierCap:
		TriggerEvent {
			schedule: MapAveragingScheduleList(fpmlDataDocument),
			triggerDates: MapDateList(fpmlDataDocument),
			trigger: MapTrigger(fpmlDataDocument),
			featurePayment: MapFeaturePayment(fpmlDataDocument),
		}


func MapTriggerEvent:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		barrierFloor TriggerEvent (0..1)
	set barrierFloor:
		TriggerEvent {
			schedule: MapAveragingScheduleList(fpmlDataDocument),
			triggerDates: MapDateList(fpmlDataDocument),
			trigger: MapTrigger(fpmlDataDocument),
			featurePayment: MapFeaturePayment(fpmlDataDocument),
		}


func MapTriggerEvent:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		knockIn TriggerEvent (0..1)
	set knockIn:
		TriggerEvent {
			schedule: MapAveragingScheduleList(fpmlDataDocument),
			triggerDates: MapDateList(fpmlDataDocument),
			trigger: MapTrigger(fpmlDataDocument),
			featurePayment: MapFeaturePayment(fpmlDataDocument),
		}


func MapTriggerEvent:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		knockOut TriggerEvent (0..1)
	set knockOut:
		TriggerEvent {
			schedule: MapAveragingScheduleList(fpmlDataDocument),
			triggerDates: MapDateList(fpmlDataDocument),
			trigger: MapTrigger(fpmlDataDocument),
			featurePayment: MapFeaturePayment(fpmlDataDocument),
		}


func MapPassThroughItemList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		passThroughItemList PassThroughItem (0..*)
	add passThroughItemList:
		[
			PassThroughItem {
				payerReceiver: MapPayerReceiver(fpmlDataDocument),
				passThroughPercentage: empty,
			}
		]


func MapAmericanExercise:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		americanExercise AmericanExercise (0..1)
	set americanExercise:
		AmericanExercise {
			commencementDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			expirationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			relevantUnderlyingDate: MapAdjustableOrRelativeDates(fpmlDataDocument),
			earliestExerciseTime: MapBusinessCenterTime(fpmlDataDocument),
			latestExerciseTime: MapBusinessCenterTime(fpmlDataDocument),
			expirationTime: MapBusinessCenterTime(fpmlDataDocument),
			expirationTimeType: empty,
			multipleExercise: MapMultipleExercise(fpmlDataDocument),
			exerciseFeeSchedule: MapExerciseFeeSchedule(fpmlDataDocument),
		}


func MapBermudaExercise:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		bermudaExercise BermudaExercise (0..1)
	set bermudaExercise:
		BermudaExercise {
			bermudaExerciseDates: MapAdjustableOrRelativeDates(fpmlDataDocument),
			relevantUnderlyingDate: MapAdjustableOrRelativeDates(fpmlDataDocument),
			earliestExerciseTime: MapBusinessCenterTime(fpmlDataDocument),
			latestExerciseTime: MapBusinessCenterTime(fpmlDataDocument),
			expirationTime: MapBusinessCenterTime(fpmlDataDocument),
			expirationTimeType: empty,
			multipleExercise: MapMultipleExercise(fpmlDataDocument),
			exerciseFeeSchedule: MapExerciseFeeSchedule(fpmlDataDocument),
		}


func MapEuropeanExercise:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		europeanExercise EuropeanExercise (0..1)
	set europeanExercise:
		EuropeanExercise {
			expirationDate: MapAdjustableOrRelativeDateList(fpmlDataDocument),
			relevantUnderlyingDate: MapAdjustableOrRelativeDates(fpmlDataDocument),
			earliestExerciseTime: MapBusinessCenterTime(fpmlDataDocument),
			expirationTime: MapBusinessCenterTime(fpmlDataDocument),
			expirationTimeType: empty,
			partialExercise: MapPartialExercise(fpmlDataDocument),
			exerciseFee: MapExerciseFee(fpmlDataDocument),
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		strikePrice Price (0..1)
	set strikePrice:
		Price {
		}


func MapFixedRateSpecification:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		strikeReference FixedRateSpecification (0..1)
		// [metadata reference]
	set strikeReference:
		FixedRateSpecification {
			rateSchedule: MapRateSchedule(fpmlDataDocument),
		}


func MapReferenceSwapCurve:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceSwapCurve ReferenceSwapCurve (0..1)
	set referenceSwapCurve:
		ReferenceSwapCurve {
			swapUnwindValue: MapSwapCurveValuation(fpmlDataDocument),
			makeWholeAmount: MapMakeWholeAmount(fpmlDataDocument),
		}


func MapAveragingStrikeFeature:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		averagingStrikeFeature AveragingStrikeFeature (0..1)
	set averagingStrikeFeature:
		AveragingStrikeFeature {
			averagingCalculation: MapAveragingCalculation(fpmlDataDocument),
			observationTerms: MapObservationTerms(fpmlDataDocument),
		}


func MapManualExercise:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		manualExercise ManualExercise (0..1)
	set manualExercise:
		ManualExercise {
			exerciseNotice: MapExerciseNotice(fpmlDataDocument),
			fallbackExercise: empty,
		}


func MapAutomaticExercise:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		automaticExercise AutomaticExercise (0..1)
	set automaticExercise:
		AutomaticExercise {
			thresholdRate: empty,
			isApplicable: empty,
		}


func MapBusinessCenter:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		businessCenter BusinessCenterEnum (0..1)
		// [metadata scheme]
	set businessCenter: empty

func MapInformationSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		primarySource InformationSource (0..1)
	set primarySource:
		InformationSource {
			sourceProvider: MapSourceProvider(fpmlDataDocument),
			sourcePage: MapSourcePage(fpmlDataDocument),
			sourcePageHeading: empty,
		}


func MapInformationSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		secondarySource InformationSource (0..1)
	set secondarySource:
		InformationSource {
			sourceProvider: MapSourceProvider(fpmlDataDocument),
			sourcePage: MapSourcePage(fpmlDataDocument),
			sourcePageHeading: empty,
		}


func MapObservationSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observationSchedule ObservationSchedule (0..1)
	set observationSchedule:
		ObservationSchedule {
			observationDate: MapObservationDateList(fpmlDataDocument),
			dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
		}


func MapPeriodicDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		periodicSchedule PeriodicDates (0..1)
	set periodicSchedule:
		PeriodicDates {
			startDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			endDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			periodFrequency: MapCalculationPeriodFrequency(fpmlDataDocument),
			periodDatesAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			dayType: empty,
		}


func MapPartyRole:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		singlePartyOption PartyRole (0..1)
	set singlePartyOption:
		PartyRole {
			partyReference: MapParty(fpmlDataDocument),
			role: empty,
			ownershipPartyReference: MapParty(fpmlDataDocument),
		}


func MapRelativeDateOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		noticePeriod RelativeDateOffset (0..1)
	set noticePeriod:
		RelativeDateOffset {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
			dateRelativeTo: MapDateRelativeTo(fpmlDataDocument),
			adjustedDate: empty,
		}


func MapRelativeDateOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		noticeDeadlinePeriod RelativeDateOffset (0..1)
	set noticeDeadlinePeriod:
		RelativeDateOffset {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
			dateRelativeTo: MapDateRelativeTo(fpmlDataDocument),
			adjustedDate: empty,
		}


func MapAdjustableRelativeOrPeriodicDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		extensionFrequency AdjustableRelativeOrPeriodicDates (0..1)
	set extensionFrequency:
		AdjustableRelativeOrPeriodicDates {
			adjustableDates: MapAdjustableDates(fpmlDataDocument),
			relativeDates: MapRelativeDates(fpmlDataDocument),
			periodicDates: MapPeriodicDates(fpmlDataDocument),
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		finalPeriodFeeAdjustment Price (0..1)
	set finalPeriodFeeAdjustment:
		Price {
		}


func MapProduct:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		basketConstituent Product (0..1)
	set basketConstituent:
		Product {
			contractualProduct: MapContractualProduct(fpmlDataDocument),
			index: MapIndex(fpmlDataDocument),
			loan: MapLoan(fpmlDataDocument),
			assetPool: MapAssetPool(fpmlDataDocument),
			foreignExchange: MapForeignExchange(fpmlDataDocument),
			commodity: MapCommodity(fpmlDataDocument),
			security: MapSecurity(fpmlDataDocument),
			basket: MapBasket(fpmlDataDocument),
		}


func MapValuationSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationSource ValuationSource (0..1)
	set valuationSource:
		ValuationSource {
			quotedCurrencyPair: MapQuotedCurrencyPair(fpmlDataDocument),
			informationSource: MapFxSpotRateSource(fpmlDataDocument),
			settlementRateOption: MapSettlementRateOption(fpmlDataDocument),
			referenceBanks: MapReferenceBanks(fpmlDataDocument),
			dealerOrCCP: MapAncillaryEntity(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		quotationAmount Money (0..1)
	set quotationAmount:
		Money {
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		minimumQuotationAmount Money (0..1)
	set minimumQuotationAmount:
		Money {
		}


func MapCashCollateralValuationMethod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashCollateralValuationMethod CashCollateralValuationMethod (0..1)
	set cashCollateralValuationMethod:
		CashCollateralValuationMethod {
			applicableCsa: empty,
			cashCollateralCurrency: empty,
			cashCollateralInterestRate: MapCashCollateralInterestRate(fpmlDataDocument),
			agreedDiscountRate: MapAgreedDiscountRate(fpmlDataDocument),
			protectedParty: [empty],
			prescribedDocumentationAdjustment: empty,
		}


func MapSingleValuationDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		singleValuationDate SingleValuationDate (0..1)
	set singleValuationDate:
		SingleValuationDate {
			businessDays: empty,
		}


func MapMultipleValuationDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		multipleValuationDates MultipleValuationDates (0..1)
	set multipleValuationDates:
		MultipleValuationDates {
			businessDaysThereafter: empty,
			numberValuationDates: empty,
		}


func MapRelativeDateOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationDate RelativeDateOffset (0..1)
	set valuationDate:
		RelativeDateOffset {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
			dateRelativeTo: MapDateRelativeTo(fpmlDataDocument),
			adjustedDate: empty,
		}


func MapFxFixingDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fxFixingDate FxFixingDate (0..1)
	set fxFixingDate:
		FxFixingDate {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
			dateRelativeToPaymentDates: MapDateRelativeToPaymentDates(fpmlDataDocument),
			dateRelativeToCalculationPeriodDates: MapDateRelativeToCalculationPeriodDates(fpmlDataDocument),
			dateRelativeToValuationDates: MapDateRelativeToValuationDates(fpmlDataDocument),
			fxFixingDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
		}


func MapAdjustableDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fxFixingSchedule AdjustableDates (0..1)
	set fxFixingSchedule:
		AdjustableDates {
			unadjustedDate: [empty],
			dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			adjustedDate: MapAdjustedDateList(fpmlDataDocument),
		}


func MapPCDeliverableObligationCharac:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		assignableLoan PCDeliverableObligationCharac (0..1)
	set assignableLoan:
		PCDeliverableObligationCharac {
			applicable: empty,
			partialCashSettlement: empty,
		}


func MapPCDeliverableObligationCharac:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		consentRequiredLoan PCDeliverableObligationCharac (0..1)
	set consentRequiredLoan:
		PCDeliverableObligationCharac {
			applicable: empty,
			partialCashSettlement: empty,
		}


func MapLoanParticipation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		directLoanParticipation LoanParticipation (0..1)
	set directLoanParticipation:
		LoanParticipation {
			qualifyingParticipationSeller: empty,
		}


func MapPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		maximumMaturity Period (0..1)
	set maximumMaturity:
		Period {
			periodMultiplier: empty,
			period: empty,
		}


func MapLoanParticipation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		indirectLoanParticipation LoanParticipation (0..1)
	set indirectLoanParticipation:
		LoanParticipation {
			qualifyingParticipationSeller: empty,
		}


func MapAdjustableRelativeOrPeriodicDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationDates AdjustableRelativeOrPeriodicDates (0..1)
	set valuationDates:
		AdjustableRelativeOrPeriodicDates {
			adjustableDates: MapAdjustableDates(fpmlDataDocument),
			relativeDates: MapRelativeDates(fpmlDataDocument),
			periodicDates: MapPeriodicDates(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationDate AdjustableOrRelativeDate (0..1)
	set valuationDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapPriceSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationPriceInitial PriceSchedule (0..1)
	set valuationPriceInitial:
		PriceSchedule {
			perUnitOf: MapUnitType(fpmlDataDocument),
			priceType: empty,
			priceExpression: empty,
			composite: MapPriceComposite(fpmlDataDocument),
			arithmeticOperator: empty,
			cashPrice: MapCashPrice(fpmlDataDocument),
		}


func MapPriceSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationPriceFinal PriceSchedule (0..1)
	set valuationPriceFinal:
		PriceSchedule {
			perUnitOf: MapUnitType(fpmlDataDocument),
			priceType: empty,
			priceExpression: empty,
			composite: MapPriceComposite(fpmlDataDocument),
			arithmeticOperator: empty,
			cashPrice: MapCashPrice(fpmlDataDocument),
		}


func MapDividendPayoutRatioList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dividendPayoutRatioList DividendPayoutRatio (0..*)
	add dividendPayoutRatioList:
		[
			DividendPayoutRatio {
				totalRatio: empty,
				cashRatio: empty,
				nonCashRatio: empty,
				basketConstituent: MapProduct(fpmlDataDocument),
			}
		]


func MapDividendCurrency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dividendCurrency DividendCurrency (0..1)
	set dividendCurrency:
		DividendCurrency {
			currency: MapCurrency(fpmlDataDocument),
			determinationMethod: empty,
			currencyReference: MapCurrencyReference(fpmlDataDocument),
		}


func MapDividendPeriodList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dividendPeriodList DividendPeriod (0..*)
	add dividendPeriodList:
		[
			DividendPeriod {
				startDate: MapDividendPaymentDate(fpmlDataDocument),
				endDate: MapDividendPaymentDate(fpmlDataDocument),
				dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
				basketConstituent: MapProduct(fpmlDataDocument),
				dividendPaymentDate: MapDividendPaymentDate(fpmlDataDocument),
				dividendValuationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			}
		]


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		varianceStrikePrice Price (0..1)
	set varianceStrikePrice:
		Price {
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		volatilityStrikePrice Price (0..1)
	set volatilityStrikePrice:
		Price {
		}


func MapVarianceCapFloor:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		varianceCapFloor VarianceCapFloor (0..1)
	set varianceCapFloor:
		VarianceCapFloor {
			varianceCap: empty,
			unadjustedVarianceCap: empty,
			boundedVariance: MapBoundedVariance(fpmlDataDocument),
		}


func MapVolatilityCapFloor:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		volatilityCapFloor VolatilityCapFloor (0..1)
	set volatilityCapFloor:
		VolatilityCapFloor {
			applicable: empty,
			totalVolatilityCap: empty,
			volatilityCapFactor: empty,
		}


func MapNonNegativeQuantitySchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		vegaNotionalAmount NonNegativeQuantitySchedule (0..1)
	set vegaNotionalAmount:
		NonNegativeQuantitySchedule {
		}


func MapObservable:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exchangeTradedContractNearest Observable (0..1)
	set exchangeTradedContractNearest:
		Observable {
			rateOption: MapFloatingRateOption(fpmlDataDocument),
			commodity: MapCommodity(fpmlDataDocument),
			productIdentifier: MapProductIdentifierList(fpmlDataDocument),
			currencyPair: MapQuotedCurrencyPair(fpmlDataDocument),
			optionReferenceType: empty,
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		correlationStrikePrice Price (0..1)
	set correlationStrikePrice:
		Price {
		}


func MapNumberRange:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		boundedCorrelation NumberRange (0..1)
	set boundedCorrelation:
		NumberRange {
			lowerBound: MapNumberBound(fpmlDataDocument),
			upperBound: MapNumberBound(fpmlDataDocument),
		}


func MapBusinessCenterList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		businessCenterList BusinessCenterEnum (0..*)
		// [metadata scheme]
	add businessCenterList:
		[ empty		]


func MapCommodityBusinessCalendarList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		commodityBusinessCalendarList CommodityBusinessCalendarEnum (0..*)
		// [metadata scheme]
	add commodityBusinessCalendarList:
		[ empty		]


func MapSecurityLegList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		securityLegList SecurityLeg (0..*)
	add securityLegList:
		[
			SecurityLeg {
				buyerSeller: MapBuyerSeller(fpmlDataDocument),
				settlementDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
				settlementAmount: MapMoney(fpmlDataDocument),
				settlementCurrency: empty,
				fxRate: MapExchangeRate(fpmlDataDocument),
				deliveryDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
				deliveryMethod: empty,
			}
		]


func MapInitialMargin:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		initialMargin InitialMargin (0..1)
	set initialMargin:
		InitialMargin {
			marginType: empty,
			margin: MapInitialMarginCalculationList(fpmlDataDocument),
			marginThreshold: MapMoney(fpmlDataDocument),
			minimumTransferAmount: MapMoney(fpmlDataDocument),
		}


func MapSecurityValuationList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		securityValuationList SecurityValuation (0..*)
	add securityValuationList:
		[
			SecurityValuation {
				securityValuationModel: MapSecurityValuationModel(fpmlDataDocument),
				underlier: MapSecurity(fpmlDataDocument),
			}
		]


func MapExerciseNotice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exerciseNotice ExerciseNotice (0..1)
	set exerciseNotice:
		ExerciseNotice {
			exerciseNoticeGiver: empty,
			exerciseNoticeReceiver: empty,
			businessCenter: MapBusinessCenter(fpmlDataDocument),
		}


func MapCancelableProvisionAdjustedDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cancelableProvisionAdjustedDates CancelableProvisionAdjustedDates (0..1)
	set cancelableProvisionAdjustedDates:
		CancelableProvisionAdjustedDates {
			cancellationEvent: MapCancellationEventList(fpmlDataDocument),
		}


func MapFinalCalculationPeriodDateAdjustmentList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		finalCalculationPeriodDateAdjustmentList FinalCalculationPeriodDateAdjustment (0..*)
	add finalCalculationPeriodDateAdjustmentList:
		[
			FinalCalculationPeriodDateAdjustment {
				relevantUnderlyingDateReference: MapAdjustableOrRelativeDates(fpmlDataDocument),
				swapStreamReference: MapInterestRatePayout(fpmlDataDocument),
				businessDayConvention: empty,
			}
		]


func MapTransfer:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		initialFee Transfer (0..1)
	set initialFee:
		Transfer {
			settlementOrigin: MapSettlementOrigin(fpmlDataDocument),
			resetOrigin: MapReset(fpmlDataDocument),
			transferExpression: MapTransferExpression(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		earliestDate AdjustableOrRelativeDate (0..1)
	set earliestDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		expirationDate AdjustableOrRelativeDate (0..1)
	set expirationDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		effectiveDate AdjustableOrRelativeDates (0..1)
	set effectiveDate:
		AdjustableOrRelativeDates {
			adjustableDates: MapAdjustableDates(fpmlDataDocument),
			relativeDates: MapRelativeDates(fpmlDataDocument),
		}


func MapPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		effectivePeriod Period (0..1)
	set effectivePeriod:
		Period {
			periodMultiplier: empty,
			period: empty,
		}


func MapBusinessCenterTime:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		earliestCancellationTime BusinessCenterTime (0..1)
	set earliestCancellationTime:
		BusinessCenterTime {
			hourMinuteTime: empty,
			businessCenter: MapBusinessCenter(fpmlDataDocument),
		}


func MapBusinessCenterTime:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		latestCancelationTime BusinessCenterTime (0..1)
	set latestCancelationTime:
		BusinessCenterTime {
			hourMinuteTime: empty,
			businessCenter: MapBusinessCenter(fpmlDataDocument),
		}


func MapMandatoryEarlyTermination:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		mandatoryEarlyTermination MandatoryEarlyTermination (0..1)
	set mandatoryEarlyTermination:
		MandatoryEarlyTermination {
			mandatoryEarlyTerminationDate: MapAdjustableDate(fpmlDataDocument),
			calculationAgent: MapCalculationAgent(fpmlDataDocument),
			cashSettlement: MapSettlementTerms(fpmlDataDocument),
			mandatoryEarlyTerminationAdjustedDates: MapMandatoryEarlyTerminationAdjustedDates(fpmlDataDocument),
		}


func MapPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		mandatoryEarlyTerminationDateTenor Period (0..1)
	set mandatoryEarlyTerminationDateTenor:
		Period {
			periodMultiplier: empty,
			period: empty,
		}


func MapOptionalEarlyTermination:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		optionalEarlyTermination OptionalEarlyTermination (0..1)
	set optionalEarlyTermination:
		OptionalEarlyTermination {
			singlePartyOption: MapBuyerSeller(fpmlDataDocument),
			mutualEarlyTermination: empty,
			americanExercise: MapAmericanExercise(fpmlDataDocument),
			bermudaExercise: MapBermudaExercise(fpmlDataDocument),
			europeanExercise: MapEuropeanExercise(fpmlDataDocument),
			exerciseNotice: MapExerciseNoticeList(fpmlDataDocument),
			followUpConfirmation: empty,
			calculationAgent: MapCalculationAgent(fpmlDataDocument),
			cashSettlement: MapSettlementTerms(fpmlDataDocument),
			optionalEarlyTerminationAdjustedDates: MapOptionalEarlyTerminationAdjustedDates(fpmlDataDocument),
		}


func MapExercisePeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		optionalEarlyTerminationParameters ExercisePeriod (0..1)
	set optionalEarlyTerminationParameters:
		ExercisePeriod {
			earliestExerciseDateTenor: MapPeriod(fpmlDataDocument),
			exerciseFrequency: MapPeriod(fpmlDataDocument),
		}


func MapExtendibleProvisionAdjustedDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		extendibleProvisionAdjustedDates ExtendibleProvisionAdjustedDates (0..1)
	set extendibleProvisionAdjustedDates:
		ExtendibleProvisionAdjustedDates {
			extensionEvent: MapExtensionEventList(fpmlDataDocument),
		}


func MapRelativeDateOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		extensionTerm RelativeDateOffset (0..1)
	set extensionTerm:
		RelativeDateOffset {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
			dateRelativeTo: MapDateRelativeTo(fpmlDataDocument),
			adjustedDate: empty,
		}


func MapAdjustableRelativeOrPeriodicDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		extensionPeriod AdjustableRelativeOrPeriodicDates (0..1)
	set extensionPeriod:
		AdjustableRelativeOrPeriodicDates {
			adjustableDates: MapAdjustableDates(fpmlDataDocument),
			relativeDates: MapRelativeDates(fpmlDataDocument),
			periodicDates: MapPeriodicDates(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		pricePerOption Money (0..1)
	set pricePerOption:
		Money {
		}


func MapMasterAgreementClauseVariantList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		variantList MasterAgreementClauseVariant (0..*)
	add variantList:
		[
			MasterAgreementClauseVariant {
				identifier: empty,
				name: empty,
				counterparty: [empty],
				otherParty: [empty],
				variableSet: MapMasterAgreementVariableSetList(fpmlDataDocument),
			}
		]


func MapExtraordinaryEvents:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		extraordinaryEvents ExtraordinaryEvents (0..1)
	set extraordinaryEvents:
		ExtraordinaryEvents {
			additionalBespokeTerms: MapClauseList(fpmlDataDocument),
			mergerEvents: MapEquityCorporateEvents(fpmlDataDocument),
			tenderOfferEvents: MapEquityCorporateEvents(fpmlDataDocument),
			compositionOfCombinedConsideration: empty,
			indexAdjustmentEvents: MapIndexAdjustmentEvents(fpmlDataDocument),
			additionalDisruptionEvents: MapAdditionalDisruptionEvents(fpmlDataDocument),
			failureToDeliver: empty,
			representations: MapRepresentations(fpmlDataDocument),
			nationalizationOrInsolvency: empty,
			delisting: empty,
		}


func MapDeterminationRolesAndTermsList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		determinationTermsList DeterminationRolesAndTerms (0..*)
	add determinationTermsList:
		[
			DeterminationRolesAndTerms {
			}
		]


func MapUnderlierSubstitutionProvision:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		substitutionProvision UnderlierSubstitutionProvision (0..1)
	set substitutionProvision:
		UnderlierSubstitutionProvision {
			whoMaySubstitute: [empty],
			substitutionBeSpokeTerms: MapClauseList(fpmlDataDocument),
			substitutionTriggerEvents: MapExtraordinaryEventsList(fpmlDataDocument),
			disputingParty: empty,
		}


func MapAverageTradingVolume:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		averageTradingVolume AverageTradingVolume (0..1)
	set averageTradingVolume:
		AverageTradingVolume {
			period: MapPeriod(fpmlDataDocument),
			methodology: empty,
		}


func MapMoneyBound:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		lowerBound MoneyBound (0..1)
	set lowerBound:
		MoneyBound {
			money: MapMoney(fpmlDataDocument),
			inclusive: empty,
		}


func MapMoneyBound:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		upperBound MoneyBound (0..1)
	set upperBound:
		MoneyBound {
			money: MapMoney(fpmlDataDocument),
			inclusive: empty,
		}


func MapNumberBound:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		lowerBound NumberBound (0..1)
	set lowerBound:
		NumberBound {
			number: empty,
			inclusive: empty,
		}


func MapNumberBound:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		upperBound NumberBound (0..1)
	set upperBound:
		NumberBound {
			number: empty,
			inclusive: empty,
		}


func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		lagDuration Offset (0..1)
	set lagDuration:
		Offset {
			dayType: empty,
		}


func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		firstObservationDateOffset Offset (0..1)
	set firstObservationDateOffset:
		Offset {
			dayType: empty,
		}


func MapPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		priceTimeIntervalQuantity Price (0..1)
	set priceTimeIntervalQuantity:
		Price {
		}


func MapAdjustableDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		adjustableDates AdjustableDates (0..1)
	set adjustableDates:
		AdjustableDates {
			unadjustedDate: [empty],
			dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			adjustedDate: MapAdjustedDateList(fpmlDataDocument),
		}


func MapRelativeDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		relativeDates RelativeDates (0..1)
	set relativeDates:
		RelativeDates {
			periodSkip: empty,
			scheduleBounds: MapDateRange(fpmlDataDocument),
		}


func MapPeriodicDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		periodicDates PeriodicDates (0..1)
	set periodicDates:
		PeriodicDates {
			startDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			endDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
			periodFrequency: MapCalculationPeriodFrequency(fpmlDataDocument),
			periodDatesAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			dayType: empty,
		}


func MapQuotedCurrencyPair:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		quotedCurrencyPair QuotedCurrencyPair (0..1)
	set quotedCurrencyPair:
		QuotedCurrencyPair {
			currency1: MapCurrency1(fpmlDataDocument),
			currency2: MapCurrency2(fpmlDataDocument),
			quoteBasis: empty,
		}


func MapAssetDeliveryProfileBlockList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		blockList AssetDeliveryProfileBlock (0..*)
	add blockList:
		[
			AssetDeliveryProfileBlock {
				startTime: empty,
				endTime: empty,
				dayOfWeek: [empty],
				deliveryCapacity: MapQuantity(fpmlDataDocument),
				priceTimeIntervalQuantity: MapPrice(fpmlDataDocument),
			}
		]


func MapMatrixSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		matrixSource SettledEntityMatrixSourceEnum (0..1)
		// [metadata scheme]
	set matrixSource: empty

func MapReferencePoolItemList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referencePoolItemList ReferencePoolItem (0..*)
	add referencePoolItemList:
		[
			ReferencePoolItem {
				constituentWeight: MapConstituentWeight(fpmlDataDocument),
				referencePair: MapReferencePair(fpmlDataDocument),
				protectionTermsReference: MapProtectionTerms(fpmlDataDocument),
				cashSettlementTermsReference: MapCashSettlementTerms(fpmlDataDocument),
				physicalSettlementTermsReference: MapPhysicalSettlementTerms(fpmlDataDocument),
			}
		]


func MapGracePeriodExtension:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		gracePeriodExtension GracePeriodExtension (0..1)
	set gracePeriodExtension:
		GracePeriodExtension {
			applicable: empty,
			gracePeriod: MapOffset(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentRequirement Money (0..1)
	set paymentRequirement:
		Money {
		}


func MapRestructuringType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		restructuringType RestructuringEnum (0..1)
		// [metadata scheme]
	set restructuringType: empty

func MapPubliclyAvailableInformation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		publiclyAvailableInformation PubliclyAvailableInformation (0..1)
	set publiclyAvailableInformation:
		PubliclyAvailableInformation {
			standardPublicSources: empty,
			publicSource: [empty],
			specifiedNumber: empty,
		}


func MapRateSource:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		rateSource FloatingRateIndexEnum (0..1)
		// [metadata scheme]
	set rateSource: empty

func MapFxLinkedNotionalAmount:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fxLinkedNotionalAmount FxLinkedNotionalAmount (0..1)
	set fxLinkedNotionalAmount:
		FxLinkedNotionalAmount {
			resetDate: empty,
			adjustedFxSpotFixingDate: empty,
			observedFxSpotRate: empty,
			notionalAmount: empty,
		}


func MapFloatingRateDefinition:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		floatingRateDefinition FloatingRateDefinition (0..1)
	set floatingRateDefinition:
		FloatingRateDefinition {
			calculatedRate: empty,
			rateObservation: MapRateObservationList(fpmlDataDocument),
			floatingRateMultiplier: empty,
			spread: empty,
			capRate: MapStrikeList(fpmlDataDocument),
			floorRate: MapStrikeList(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		forecastAmount Money (0..1)
	set forecastAmount:
		Money {
		}


func MapSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		floatingRateMultiplierSchedule Schedule (0..1)
	set floatingRateMultiplierSchedule:
		Schedule {
			value: empty,
			datedValue: MapDatedValueList(fpmlDataDocument),
		}


func MapSpreadScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		spreadScheduleList SpreadSchedule (0..*)
	add spreadScheduleList:
		[
			SpreadSchedule {
				spreadScheduleType: MapSpreadScheduleType(fpmlDataDocument),
			}
		]


func MapStrikeScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		capRateScheduleList StrikeSchedule (0..*)
	add capRateScheduleList:
		[
			StrikeSchedule {
				buyer: empty,
				seller: empty,
			}
		]


func MapStrikeScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		floorRateScheduleList StrikeSchedule (0..*)
	add floorRateScheduleList:
		[
			StrikeSchedule {
				buyer: empty,
				seller: empty,
			}
		]


func MapOptionStrike:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		upperStrike OptionStrike (0..1)
	set upperStrike:
		OptionStrike {
			strikePrice: MapPrice(fpmlDataDocument),
			strikeReference: MapFixedRateSpecification(fpmlDataDocument),
			referenceSwapCurve: MapReferenceSwapCurve(fpmlDataDocument),
			averagingStrikeFeature: MapAveragingStrikeFeature(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		expirationDateTwo AdjustableOrRelativeDate (0..1)
	set expirationDateTwo:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapAveragingScheduleList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		scheduleList AveragingSchedule (0..*)
	add scheduleList:
		[
			AveragingSchedule {
				startDate: empty,
				endDate: empty,
				averagingPeriodFrequency: MapCalculationPeriodFrequency(fpmlDataDocument),
			}
		]


func MapDateList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		triggerDates DateList (0..1)
	set triggerDates:
		DateList {
			date: [empty],
		}


func MapTrigger:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		trigger Trigger (0..1)
	set trigger:
		Trigger {
			level: empty,
			levelPercentage: empty,
			creditEvents: MapCreditEvents(fpmlDataDocument),
			creditEventsReference: MapCreditEvents(fpmlDataDocument),
			triggerType: empty,
			triggerTimeType: empty,
		}


func MapFeaturePayment:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		featurePayment FeaturePayment (0..1)
	set featurePayment:
		FeaturePayment {
			payerReceiver: MapPartyReferencePayerReceiver(fpmlDataDocument),
			levelPercentage: empty,
			amount: empty,
			time: empty,
			currency: MapCurrency(fpmlDataDocument),
			paymentDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		commencementDate AdjustableOrRelativeDate (0..1)
	set commencementDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		relevantUnderlyingDate AdjustableOrRelativeDates (0..1)
	set relevantUnderlyingDate:
		AdjustableOrRelativeDates {
			adjustableDates: MapAdjustableDates(fpmlDataDocument),
			relativeDates: MapRelativeDates(fpmlDataDocument),
		}


func MapBusinessCenterTime:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		earliestExerciseTime BusinessCenterTime (0..1)
	set earliestExerciseTime:
		BusinessCenterTime {
			hourMinuteTime: empty,
			businessCenter: MapBusinessCenter(fpmlDataDocument),
		}


func MapBusinessCenterTime:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		latestExerciseTime BusinessCenterTime (0..1)
	set latestExerciseTime:
		BusinessCenterTime {
			hourMinuteTime: empty,
			businessCenter: MapBusinessCenter(fpmlDataDocument),
		}


func MapBusinessCenterTime:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		expirationTime BusinessCenterTime (0..1)
	set expirationTime:
		BusinessCenterTime {
			hourMinuteTime: empty,
			businessCenter: MapBusinessCenter(fpmlDataDocument),
		}


func MapMultipleExercise:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		multipleExercise MultipleExercise (0..1)
	set multipleExercise:
		MultipleExercise {
			maximumNotionalAmount: empty,
			maximumNumberOfOptions: empty,
		}


func MapExerciseFeeSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exerciseFeeSchedule ExerciseFeeSchedule (0..1)
	set exerciseFeeSchedule:
		ExerciseFeeSchedule {
			notionalReference: MapMoney(fpmlDataDocument),
			feeAmountSchedule: MapAmountSchedule(fpmlDataDocument),
			feeRateSchedule: MapSchedule(fpmlDataDocument),
			feePaymentDate: MapRelativeDateOffset(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		bermudaExerciseDates AdjustableOrRelativeDates (0..1)
	set bermudaExerciseDates:
		AdjustableOrRelativeDates {
			adjustableDates: MapAdjustableDates(fpmlDataDocument),
			relativeDates: MapRelativeDates(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDateList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		expirationDateList AdjustableOrRelativeDate (0..*)
	add expirationDateList:
		[
			AdjustableOrRelativeDate {
				adjustableDate: MapAdjustableDate(fpmlDataDocument),
				relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
			}
		]


func MapPartialExercise:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		partialExercise PartialExercise (0..1)
	set partialExercise:
		PartialExercise {
			notionaReference: MapMoney(fpmlDataDocument),
			integralMultipleAmount: empty,
			minimumNotionalAmount: empty,
			minimumNumberOfOptions: empty,
		}


func MapExerciseFee:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exerciseFee ExerciseFee (0..1)
	set exerciseFee:
		ExerciseFee {
			notionalReference: MapMoney(fpmlDataDocument),
			feeAmount: empty,
			feeRate: empty,
			feePaymentDate: MapRelativeDateOffset(fpmlDataDocument),
		}


func MapSwapCurveValuation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		swapUnwindValue SwapCurveValuation (0..1)
	set swapUnwindValue:
		SwapCurveValuation {
			floatingRateIndex: empty,
			indexTenor: MapPeriod(fpmlDataDocument),
			spread: empty,
			side: empty,
		}


func MapMakeWholeAmount:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		makeWholeAmount MakeWholeAmount (0..1)
	set makeWholeAmount:
		MakeWholeAmount {
			interpolationMethod: empty,
			earlyCallDate: MapEarlyCallDate(fpmlDataDocument),
		}


func MapAveragingCalculation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		averagingCalculation AveragingCalculation (0..1)
	set averagingCalculation:
		AveragingCalculation {
			averagingMethod: MapAveragingCalculationMethod(fpmlDataDocument),
			precision: MapRounding(fpmlDataDocument),
		}


func MapObservationDateList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		observationDateList ObservationDate (0..*)
	add observationDateList:
		[
			ObservationDate {
				unadjustedDate: empty,
				adjustedDate: empty,
				weight: empty,
				observationReference: empty,
			}
		]


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		startDate AdjustableOrRelativeDate (0..1)
	set startDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		endDate AdjustableOrRelativeDate (0..1)
	set endDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapCalculationPeriodFrequency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		periodFrequency CalculationPeriodFrequency (0..1)
	set periodFrequency:
		CalculationPeriodFrequency {
			rollConvention: empty,
			balanceOfFirstPeriod: empty,
		}


func MapBusinessDayAdjustments:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		periodDatesAdjustments BusinessDayAdjustments (0..1)
	set periodDatesAdjustments:
		BusinessDayAdjustments {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
		}


func MapQuotedCurrencyPair:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		quotedCurrencyPair QuotedCurrencyPair (0..1)
		// [metadata address]
	set quotedCurrencyPair:
		QuotedCurrencyPair {
			currency1: MapCurrency1(fpmlDataDocument),
			currency2: MapCurrency2(fpmlDataDocument),
			quoteBasis: empty,
		}


func MapSettlementRateOption:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		settlementRateOption SettlementRateOption (0..1)
	set settlementRateOption:
		SettlementRateOption {
			settlementRateOption: MapSettlementRateOption(fpmlDataDocument),
			priceSourceDisruption: MapPriceSourceDisruption(fpmlDataDocument),
		}


func MapReferenceBanks:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceBanks ReferenceBanks (0..1)
	set referenceBanks:
		ReferenceBanks {
			referenceBank: MapReferenceBankList(fpmlDataDocument),
		}


func MapAncillaryEntity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dealerOrCCP AncillaryEntity (0..1)
	set dealerOrCCP:
		AncillaryEntity {
			ancillaryParty: empty,
			legalEntity: MapLegalEntity(fpmlDataDocument),
		}


func MapCashCollateralInterestRate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashCollateralInterestRate string (0..1)
		// [metadata scheme]
	set cashCollateralInterestRate: empty

func MapAgreedDiscountRate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		agreedDiscountRate string (0..1)
		// [metadata scheme]
	set agreedDiscountRate: empty

func MapDateRelativeToPaymentDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dateRelativeToPaymentDates DateRelativeToPaymentDates (0..1)
	set dateRelativeToPaymentDates:
		DateRelativeToPaymentDates {
			paymentDatesReference: MapPaymentDatesList(fpmlDataDocument),
		}


func MapDateRelativeToCalculationPeriodDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dateRelativeToCalculationPeriodDates DateRelativeToCalculationPeriodDates (0..1)
	set dateRelativeToCalculationPeriodDates:
		DateRelativeToCalculationPeriodDates {
			calculationPeriodDatesReference: MapCalculationPeriodDatesList(fpmlDataDocument),
		}


func MapDateRelativeToValuationDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dateRelativeToValuationDates DateRelativeToValuationDates (0..1)
	set dateRelativeToValuationDates:
		DateRelativeToValuationDates {
			valuationDatesReference: MapPerformanceValuationDatesList(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fxFixingDate AdjustableOrRelativeDate (0..1)
	set fxFixingDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapCurrencyReference:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		currencyReference string (0..1)
		// [metadata reference]
	set currencyReference: empty

func MapDividendPaymentDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		startDate DividendPaymentDate (0..1)
	set startDate:
		DividendPaymentDate {
			dividendDateReference: MapDividendDateReference(fpmlDataDocument),
			dividendDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
		}


func MapDividendPaymentDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		endDate DividendPaymentDate (0..1)
	set endDate:
		DividendPaymentDate {
			dividendDateReference: MapDividendDateReference(fpmlDataDocument),
			dividendDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
		}


func MapDividendPaymentDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dividendPaymentDate DividendPaymentDate (0..1)
	set dividendPaymentDate:
		DividendPaymentDate {
			dividendDateReference: MapDividendDateReference(fpmlDataDocument),
			dividendDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dividendValuationDate AdjustableOrRelativeDate (0..1)
	set dividendValuationDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapBoundedVariance:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		boundedVariance BoundedVariance (0..1)
	set boundedVariance:
		BoundedVariance {
			realisedVarianceMethod: empty,
			daysInRangeAdjustment: empty,
			upperBarrier: empty,
			lowerBarrier: empty,
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		settlementAmount Money (0..1)
	set settlementAmount:
		Money {
		}


func MapExchangeRate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fxRate ExchangeRate (0..1)
	set fxRate:
		ExchangeRate {
			crossRate: MapCrossRateList(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		deliveryDate AdjustableOrRelativeDate (0..1)
	set deliveryDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapInitialMarginCalculationList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		marginList InitialMarginCalculation (0..*)
	add marginList:
		[
			InitialMarginCalculation {
				marginRatio: empty,
				marginRatioThreshold: [empty],
				haircut: empty,
				haircutThreshold: [empty],
			}
		]


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		marginThreshold Money (0..1)
	set marginThreshold:
		Money {
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		minimumTransferAmount Money (0..1)
	set minimumTransferAmount:
		Money {
		}


func MapSecurityValuationModel:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		securityValuationModel SecurityValuationModel (0..1)
	set securityValuationModel:
		SecurityValuationModel {
			bondValuationModel: MapBondValuationModel(fpmlDataDocument),
			unitContractValuationModel: MapUnitContractValuationModel(fpmlDataDocument),
		}


func MapSecurity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		underlier Security (0..1)
	set underlier:
		Security {
			securityType: empty,
			debtType: MapDebtType(fpmlDataDocument),
			equityType: empty,
			fundType: empty,
			economicTerms: MapEconomicTerms(fpmlDataDocument),
		}


func MapCancellationEventList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cancellationEventList CancellationEvent (0..*)
	add cancellationEventList:
		[
			CancellationEvent {
				adjustedExerciseDate: empty,
				adjustedEarlyTerminationDate: empty,
			}
		]


func MapAdjustableOrRelativeDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		relevantUnderlyingDateReference AdjustableOrRelativeDates (0..1)
		// [metadata reference]
	set relevantUnderlyingDateReference:
		AdjustableOrRelativeDates {
			adjustableDates: MapAdjustableDates(fpmlDataDocument),
			relativeDates: MapRelativeDates(fpmlDataDocument),
		}


func MapInterestRatePayout:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		swapStreamReference InterestRatePayout (0..1)
		// [metadata reference]
	set swapStreamReference:
		InterestRatePayout {
			rateSpecification: MapRateSpecification(fpmlDataDocument),
			dayCountFraction: MapDayCountFraction(fpmlDataDocument),
			calculationPeriodDates: MapCalculationPeriodDates(fpmlDataDocument),
			paymentDates: MapPaymentDates(fpmlDataDocument),
			paymentDate: MapAdjustableDate(fpmlDataDocument),
			paymentDelay: empty,
			resetDates: MapResetDates(fpmlDataDocument),
			discountingMethod: MapDiscountingMethod(fpmlDataDocument),
			compoundingMethod: empty,
			cashflowRepresentation: MapCashflowRepresentation(fpmlDataDocument),
			stubPeriod: MapStubPeriod(fpmlDataDocument),
			bondReference: MapBondReference(fpmlDataDocument),
			fixedAmount: empty,
			floatingAmount: empty,
			spreadCalculationMethod: empty,
		}


func MapAdjustableDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		mandatoryEarlyTerminationDate AdjustableDate (0..1)
	set mandatoryEarlyTerminationDate:
		AdjustableDate {
			unadjustedDate: empty,
			dateAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			dateAdjustmentsReference: MapBusinessDayAdjustments(fpmlDataDocument),
			adjustedDate: MapAdjustedDate(fpmlDataDocument),
		}


func MapSettlementTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashSettlement SettlementTerms (0..1)
	set cashSettlement:
		SettlementTerms {
			cashSettlementTerms: MapCashSettlementTermsList(fpmlDataDocument),
			physicalSettlementTerms: MapPhysicalSettlementTerms(fpmlDataDocument),
		}


func MapMandatoryEarlyTerminationAdjustedDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		mandatoryEarlyTerminationAdjustedDates MandatoryEarlyTerminationAdjustedDates (0..1)
	set mandatoryEarlyTerminationAdjustedDates:
		MandatoryEarlyTerminationAdjustedDates {
			adjustedEarlyTerminationDate: empty,
			adjustedCashSettlementValuationDate: empty,
			adjustedCashSettlementPaymentDate: empty,
		}


func MapBuyerSeller:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		singlePartyOption BuyerSeller (0..1)
	set singlePartyOption:
		BuyerSeller {
			buyer: empty,
			seller: empty,
		}


func MapExerciseNoticeList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exerciseNoticeList ExerciseNotice (0..*)
	add exerciseNoticeList:
		[
			ExerciseNotice {
				exerciseNoticeGiver: empty,
				exerciseNoticeReceiver: empty,
				businessCenter: MapBusinessCenter(fpmlDataDocument),
			}
		]


func MapOptionalEarlyTerminationAdjustedDates:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		optionalEarlyTerminationAdjustedDates OptionalEarlyTerminationAdjustedDates (0..1)
	set optionalEarlyTerminationAdjustedDates:
		OptionalEarlyTerminationAdjustedDates {
			earlyTerminationEvent: MapEarlyTerminationEventList(fpmlDataDocument),
		}


func MapPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		earliestExerciseDateTenor Period (0..1)
	set earliestExerciseDateTenor:
		Period {
			periodMultiplier: empty,
			period: empty,
		}


func MapPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		exerciseFrequency Period (0..1)
	set exerciseFrequency:
		Period {
			periodMultiplier: empty,
			period: empty,
		}


func MapExtensionEventList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		extensionEventList ExtensionEvent (0..*)
	add extensionEventList:
		[
			ExtensionEvent {
				adjustedExerciseDate: empty,
				adjustedExtendedTerminationDate: empty,
			}
		]


func MapMasterAgreementVariableSetList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		variableSetList MasterAgreementVariableSet (0..*)
	add variableSetList:
		[
			MasterAgreementVariableSet {
				variableSet: MapMasterAgreementVariableSetList(fpmlDataDocument),
				name: empty,
				value: empty,
			}
		]


func MapClauseList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		additionalBespokeTermsList Clause (0..*)
	add additionalBespokeTermsList:
		[
			Clause {
				identifier: empty,
				terms: empty,
				subcomponents: MapClauseList(fpmlDataDocument),
			}
		]


func MapEquityCorporateEvents:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		mergerEvents EquityCorporateEvents (0..1)
	set mergerEvents:
		EquityCorporateEvents {
		}


func MapEquityCorporateEvents:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		tenderOfferEvents EquityCorporateEvents (0..1)
	set tenderOfferEvents:
		EquityCorporateEvents {
		}


func MapIndexAdjustmentEvents:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		indexAdjustmentEvents IndexAdjustmentEvents (0..1)
	set indexAdjustmentEvents:
		IndexAdjustmentEvents {
		}


func MapAdditionalDisruptionEvents:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		additionalDisruptionEvents AdditionalDisruptionEvents (0..1)
	set additionalDisruptionEvents:
		AdditionalDisruptionEvents {
			changeInLaw: empty,
			failureToDeliver: empty,
			insolvencyFiling: empty,
			hedgingDisruption: empty,
			increasedCostOfHedging: empty,
			foreignOwnershipEvent: empty,
			lossOfStockBorrow: empty,
			maximumStockLoanRate: empty,
			increasedCostOfStockBorrow: empty,
			initialStockLoanRate: empty,
			determiningParty: empty,
			additionalBespokeTerms: MapClauseList(fpmlDataDocument),
		}


func MapRepresentations:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		representations Representations (0..1)
	set representations:
		Representations {
		}


func MapClauseList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		substitutionBeSpokeTermsList Clause (0..*)
	add substitutionBeSpokeTermsList:
		[
			Clause {
				identifier: empty,
				terms: empty,
				subcomponents: MapClauseList(fpmlDataDocument),
			}
		]


func MapExtraordinaryEventsList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		substitutionTriggerEventsList ExtraordinaryEvents (0..*)
	add substitutionTriggerEventsList:
		[
			ExtraordinaryEvents {
				additionalBespokeTerms: MapClauseList(fpmlDataDocument),
				mergerEvents: MapEquityCorporateEvents(fpmlDataDocument),
				tenderOfferEvents: MapEquityCorporateEvents(fpmlDataDocument),
				compositionOfCombinedConsideration: empty,
				indexAdjustmentEvents: MapIndexAdjustmentEvents(fpmlDataDocument),
				additionalDisruptionEvents: MapAdditionalDisruptionEvents(fpmlDataDocument),
				failureToDeliver: empty,
				representations: MapRepresentations(fpmlDataDocument),
				nationalizationOrInsolvency: empty,
				delisting: empty,
			}
		]


func MapPeriod:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		period Period (0..1)
	set period:
		Period {
			periodMultiplier: empty,
			period: empty,
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		money Money (0..1)
	set money:
		Money {
		}


func MapDateRange:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		scheduleBounds DateRange (0..1)
	set scheduleBounds:
		DateRange {
			startDate: empty,
			endDate: empty,
		}


func MapConstituentWeight:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		constituentWeight ConstituentWeight (0..1)
	set constituentWeight:
		ConstituentWeight {
			openUnits: empty,
			basketPercentage: empty,
		}


func MapReferencePair:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referencePair ReferencePair (0..1)
	set referencePair:
		ReferencePair {
			referenceEntity: MapLegalEntity(fpmlDataDocument),
			referenceObligation: MapReferenceObligation(fpmlDataDocument),
			noReferenceObligation: empty,
			entityType: MapEntityType(fpmlDataDocument),
		}


func MapProtectionTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		protectionTermsReference ProtectionTerms (0..1)
		// [metadata reference]
	set protectionTermsReference:
		ProtectionTerms {
			creditEvents: MapCreditEvents(fpmlDataDocument),
			obligations: MapObligations(fpmlDataDocument),
			floatingAmountEvents: MapFloatingAmountEvents(fpmlDataDocument),
		}


func MapCashSettlementTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cashSettlementTermsReference CashSettlementTerms (0..1)
		// [metadata reference]
	set cashSettlementTermsReference:
		CashSettlementTerms {
			cashSettlementMethod: empty,
			valuationMethod: MapValuationMethod(fpmlDataDocument),
			valuationDate: MapValuationDate(fpmlDataDocument),
			valuationTime: MapBusinessCenterTime(fpmlDataDocument),
			cashSettlementAmount: MapMoney(fpmlDataDocument),
			recoveryFactor: empty,
			fixedSettlement: empty,
			accruedInterest: empty,
		}


func MapPhysicalSettlementTerms:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		physicalSettlementTermsReference PhysicalSettlementTerms (0..1)
		// [metadata reference]
	set physicalSettlementTermsReference:
		PhysicalSettlementTerms {
			clearedPhysicalSettlement: empty,
			predeterminedClearingOrganizationParty: empty,
			physicalSettlementPeriod: MapPhysicalSettlementPeriod(fpmlDataDocument),
			deliverableObligations: MapDeliverableObligations(fpmlDataDocument),
			escrow: empty,
			sixtyBusinessDaySettlementCap: empty,
		}


func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		gracePeriod Offset (0..1)
	set gracePeriod:
		Offset {
			dayType: empty,
		}


func MapRateObservationList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		rateObservationList RateObservation (0..*)
	add rateObservationList:
		[
			RateObservation {
				resetDate: empty,
				adjustedFixingDate: empty,
				observedRate: empty,
				treatedRate: empty,
				observationWeight: empty,
				rateReference: MapRateObservation(fpmlDataDocument),
				forecastRate: empty,
				treatedForecastRate: empty,
			}
		]


func MapStrikeList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		capRateList Strike (0..*)
	add capRateList:
		[
			Strike {
				strikeRate: empty,
				buyer: empty,
				seller: empty,
			}
		]


func MapStrikeList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		floorRateList Strike (0..*)
	add floorRateList:
		[
			Strike {
				strikeRate: empty,
				buyer: empty,
				seller: empty,
			}
		]


func MapDatedValueList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		datedValueList DatedValue (0..*)
	add datedValueList:
		[
			DatedValue {
				date: empty,
				value: empty,
			}
		]


func MapCalculationPeriodFrequency:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		averagingPeriodFrequency CalculationPeriodFrequency (0..1)
	set averagingPeriodFrequency:
		CalculationPeriodFrequency {
			rollConvention: empty,
			balanceOfFirstPeriod: empty,
		}


func MapCreditEvents:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		creditEventsReference CreditEvents (0..1)
		// [metadata reference]
	set creditEventsReference:
		CreditEvents {
			bankruptcy: empty,
			failureToPay: MapFailureToPay(fpmlDataDocument),
			failureToPayPrincipal: empty,
			failureToPayInterest: empty,
			obligationDefault: empty,
			obligationAcceleration: empty,
			repudiationMoratorium: empty,
			restructuring: MapRestructuring(fpmlDataDocument),
			governmentalIntervention: empty,
			distressedRatingsDowngrade: empty,
			maturityExtension: empty,
			writedown: empty,
			impliedWritedown: empty,
			defaultRequirement: MapMoney(fpmlDataDocument),
			creditEventNotice: MapCreditEventNotice(fpmlDataDocument),
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		notionalReference Money (0..1)
		// [metadata reference]
	set notionalReference:
		Money {
		}


func MapAmountSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		feeAmountSchedule AmountSchedule (0..1)
	set feeAmountSchedule:
		AmountSchedule {
			currency: MapCurrencyList(fpmlDataDocument),
		}


func MapSchedule:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		feeRateSchedule Schedule (0..1)
	set feeRateSchedule:
		Schedule {
			value: empty,
			datedValue: MapDatedValueList(fpmlDataDocument),
		}


func MapRelativeDateOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		feePaymentDate RelativeDateOffset (0..1)
	set feePaymentDate:
		RelativeDateOffset {
			businessDayConvention: empty,
			businessCenters: MapBusinessCenters(fpmlDataDocument),
			businessCentersReference: MapBusinessCenters(fpmlDataDocument),
			dateRelativeTo: MapDateRelativeTo(fpmlDataDocument),
			adjustedDate: empty,
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		notionaReference Money (0..1)
		// [metadata reference]
	set notionaReference:
		Money {
		}


func MapEarlyCallDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		earlyCallDate date (0..1)
		// [metadata id]
	set earlyCallDate: empty

func MapSettlementRateOption:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		settlementRateOption SettlementRateOptionEnum (0..1)
		// [metadata scheme]
	set settlementRateOption: empty

func MapPriceSourceDisruption:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		priceSourceDisruption PriceSourceDisruption (0..1)
	set priceSourceDisruption:
		PriceSourceDisruption {
			fallbackReferencePrice: MapFallbackReferencePrice(fpmlDataDocument),
		}


func MapReferenceBankList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceBankList ReferenceBank (0..*)
	add referenceBankList:
		[
			ReferenceBank {
				referenceBankId: MapReferenceBankId(fpmlDataDocument),
				referenceBankName: empty,
			}
		]


func MapLegalEntity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		legalEntity LegalEntity (0..1)
	set legalEntity:
		LegalEntity {
			entityId: MapEntityIdList(fpmlDataDocument),
			name: MapName(fpmlDataDocument),
		}


func MapPaymentDatesList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDatesReferenceList PaymentDates (0..*)
		// [metadata reference]
	add paymentDatesReferenceList:
		[
			PaymentDates {
				paymentFrequency: MapFrequency(fpmlDataDocument),
				firstPaymentDate: empty,
				lastRegularPaymentDate: empty,
				paymentDateSchedule: MapPaymentDateSchedule(fpmlDataDocument),
				payRelativeTo: empty,
				paymentDaysOffset: MapOffset(fpmlDataDocument),
				paymentDatesAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
			}
		]


func MapCalculationPeriodDatesList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationPeriodDatesReferenceList CalculationPeriodDates (0..*)
		// [metadata reference]
	add calculationPeriodDatesReferenceList:
		[
			CalculationPeriodDates {
				effectiveDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
				terminationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
				calculationPeriodDatesAdjustments: MapBusinessDayAdjustments(fpmlDataDocument),
				firstPeriodStartDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
				firstRegularPeriodStartDate: empty,
				firstCompoundingPeriodEndDate: empty,
				lastRegularPeriodEndDate: empty,
				stubPeriodType: empty,
				calculationPeriodFrequency: MapCalculationPeriodFrequency(fpmlDataDocument),
			}
		]


func MapPerformanceValuationDatesList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationDatesReferenceList PerformanceValuationDates (0..*)
		// [metadata reference]
	add valuationDatesReferenceList:
		[
			PerformanceValuationDates {
				determinationMethod: empty,
				valuationDates: MapAdjustableRelativeOrPeriodicDates(fpmlDataDocument),
				valuationDate: MapAdjustableOrRelativeDate(fpmlDataDocument),
				valuationTime: MapBusinessCenterTime(fpmlDataDocument),
				valuationTimeType: empty,
			}
		]


func MapDividendDateReference:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dividendDateReference DividendDateReference (0..1)
	set dividendDateReference:
		DividendDateReference {
			dateReference: empty,
			paymentDateOffset: MapOffset(fpmlDataDocument),
		}


func MapAdjustableOrRelativeDate:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		dividendDate AdjustableOrRelativeDate (0..1)
		// [metadata reference]
	set dividendDate:
		AdjustableOrRelativeDate {
			adjustableDate: MapAdjustableDate(fpmlDataDocument),
			relativeDate: MapAdjustedRelativeDateOffset(fpmlDataDocument),
		}


func MapBondValuationModel:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		bondValuationModel BondValuationModel (0..1)
	set bondValuationModel:
		BondValuationModel {
			nominalAmount: MapMoney(fpmlDataDocument),
			bondPriceAndYieldModel: MapBondPriceAndYieldModel(fpmlDataDocument),
			accrualsAmount: MapMoney(fpmlDataDocument),
		}


func MapUnitContractValuationModel:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		unitContractValuationModel UnitContractValuationModel (0..1)
	set unitContractValuationModel:
		UnitContractValuationModel {
			numberOfUnits: MapQuantity(fpmlDataDocument),
			unitPrice: MapMoney(fpmlDataDocument),
		}


func MapEarlyTerminationEventList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		earlyTerminationEventList EarlyTerminationEvent (0..*)
	add earlyTerminationEventList:
		[
			EarlyTerminationEvent {
				adjustedExerciseDate: empty,
				adjustedEarlyTerminationDate: empty,
				adjustedCashSettlementValuationDate: empty,
				adjustedCashSettlementPaymentDate: empty,
				adjustedExerciseFeePaymentDate: empty,
			}
		]


func MapClauseList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		subcomponentsList Clause (0..*)
	add subcomponentsList:
		[
			Clause {
				identifier: empty,
				terms: empty,
				subcomponents: MapClauseList(fpmlDataDocument),
			}
		]


func MapReferenceObligation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceObligation ReferenceObligation (0..1)
	set referenceObligation:
		ReferenceObligation {
			security: MapSecurity(fpmlDataDocument),
			loan: MapLoan(fpmlDataDocument),
			primaryObligor: MapLegalEntity(fpmlDataDocument),
			primaryObligorReference: MapLegalEntity(fpmlDataDocument),
			guarantor: MapLegalEntity(fpmlDataDocument),
			guarantorReference: empty,
			standardReferenceObligation: empty,
		}


func MapEntityType:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		entityType EntityTypeEnum (0..1)
		// [metadata scheme]
	set entityType: empty

func MapRateObservation:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		rateReference RateObservation (0..1)
		// [metadata reference]
	set rateReference:
		RateObservation {
			resetDate: empty,
			adjustedFixingDate: empty,
			observedRate: empty,
			treatedRate: empty,
			observationWeight: empty,
			rateReference: MapRateObservation(fpmlDataDocument),
			forecastRate: empty,
			treatedForecastRate: empty,
		}


func MapCurrencyList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		currencyList string (0..*)
		// [metadata scheme]
	add currencyList:
		[ empty		]


func MapFallbackReferencePrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fallbackReferencePrice FallbackReferencePrice (0..1)
	set fallbackReferencePrice:
		FallbackReferencePrice {
			valuationPostponement: MapValuationPostponement(fpmlDataDocument),
			fallBackSettlementRateOption: MapFallBackSettlementRateOptionList(fpmlDataDocument),
			fallbackSurveyValuationPostponement: empty,
			calculationAgentDetermination: MapCalculationAgent(fpmlDataDocument),
		}


func MapReferenceBankId:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		referenceBankId string (0..1)
		// [metadata scheme]
	set referenceBankId: empty

func MapOffset:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		paymentDateOffset Offset (0..1)
	set paymentDateOffset:
		Offset {
			dayType: empty,
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		nominalAmount Money (0..1)
	set nominalAmount:
		Money {
		}


func MapBondPriceAndYieldModel:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		bondPriceAndYieldModel BondPriceAndYieldModel (0..1)
	set bondPriceAndYieldModel:
		BondPriceAndYieldModel {
			cleanOrDirtyPrice: MapCleanOrDirtyPrice(fpmlDataDocument),
			relativePrice: MapRelativePrice(fpmlDataDocument),
			yieldToMaturity: empty,
			inflationFactor: empty,
			allInPrice: empty,
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		accrualsAmount Money (0..1)
	set accrualsAmount:
		Money {
		}


func MapQuantity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		numberOfUnits Quantity (0..1)
	set numberOfUnits:
		Quantity {
		}


func MapMoney:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		unitPrice Money (0..1)
	set unitPrice:
		Money {
		}


func MapValuationPostponement:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		valuationPostponement ValuationPostponement (0..1)
	set valuationPostponement:
		ValuationPostponement {
			maximumDaysOfPostponement: empty,
		}


func MapFallBackSettlementRateOptionList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		fallBackSettlementRateOptionList SettlementRateOptionEnum (0..*)
		// [metadata scheme]
	add fallBackSettlementRateOptionList:
		[ empty		]


func MapCalculationAgent:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		calculationAgentDetermination CalculationAgent (0..1)
	set calculationAgentDetermination:
		CalculationAgent {
			calculationAgentParty: empty,
			calculationAgentPartyEnum: empty,
			calculationAgentBusinessCenter: MapCalculationAgentBusinessCenter(fpmlDataDocument),
		}


func MapCleanOrDirtyPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cleanOrDirtyPrice CleanOrDirtyPrice (0..1)
	set cleanOrDirtyPrice:
		CleanOrDirtyPrice {
			cleanPrice: MapCleanPrice(fpmlDataDocument),
			dirtyPrice: empty,
		}


func MapRelativePrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		relativePrice RelativePrice (0..1)
	set relativePrice:
		RelativePrice {
			spread: empty,
			bondEquityModel: MapBondEquityModelList(fpmlDataDocument),
		}


func MapCleanPrice:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		cleanPrice CleanPrice (0..1)
	set cleanPrice:
		CleanPrice {
			cleanPrice: empty,
			accruals: empty,
			dirtyPrice: empty,
		}


func MapBondEquityModelList:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		bondEquityModelList BondEquityModel (0..*)
	add bondEquityModelList:
		[
			BondEquityModel {
				bondchoiceModel: MapBondChoiceModel(fpmlDataDocument),
				equity: MapEquity(fpmlDataDocument),
			}
		]


func MapBondChoiceModel:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		bondchoiceModel BondChoiceModel (0..1)
	set bondchoiceModel:
		BondChoiceModel {
			bond: MapBond(fpmlDataDocument),
			convertibleBond: MapConvertibleBond(fpmlDataDocument),
		}


func MapEquity:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		equity Equity (0..1)
	set equity:
		Equity {
		}


func MapBond:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		bond Bond (0..1)
	set bond:
		Bond {
		}


func MapConvertibleBond:
	inputs:
		fpmlDataDocument fpml.DataDocument (0..1)
	output:
		convertibleBond ConvertibleBond (0..1)
	set convertibleBond:
		ConvertibleBond {
		}


